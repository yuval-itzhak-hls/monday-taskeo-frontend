import { AuthenticatedCommand } from '../../commands-base/authenticated-command.js';
import { SchedulerBaseFlags } from '../../consts/scheduler/flags.js';
import { DynamicChoicesService } from '../../services/dynamic-choices-service.js';
import { SchedulerService } from '../../services/scheduler-service.js';
import logger from '../../utils/logger.js';
import { chooseRegionIfNeeded, getRegionFromString } from '../../utils/region.js';
export default class SchedulerRun extends AuthenticatedCommand {
    static description = 'Manually trigger a scheduled job to run for an app';
    static examples = ['<%= config.bin %> <%= command.id %> -a APP_ID -n "my-job"'];
    static flags = SchedulerRun.serializeFlags(SchedulerBaseFlags);
    DEBUG_TAG = 'scheduler_run';
    async run() {
        const { flags } = await this.parse(SchedulerRun);
        let { appId, name } = flags;
        const { region } = flags;
        const parsedRegion = getRegionFromString(region);
        try {
            if (!appId)
                appId = await DynamicChoicesService.chooseApp();
            const selectedRegion = await chooseRegionIfNeeded(parsedRegion, { appId });
            if (!name)
                name = await DynamicChoicesService.chooseSchedulerJob(appId, selectedRegion);
            logger.debug(`Running scheduler job ${name} for appId: ${appId}`, this.DEBUG_TAG);
            this.preparePrintCommand(this, {
                appId,
                name,
                region: selectedRegion,
            });
            await SchedulerService.runJob(appId, name, selectedRegion);
            logger.info(`Successfully triggered job: ${name}`);
        }
        catch (error) {
            console.log(error);
            logger.debug(error, this.DEBUG_TAG);
            process.exit(1);
        }
    }
}
