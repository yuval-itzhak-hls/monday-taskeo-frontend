import { Flags } from '@oclif/core';
import chalk from 'chalk';
import { AuthenticatedCommand } from '../../commands-base/authenticated-command.js';
import { VAR_UNKNOWN } from '../../consts/messages.js';
import { getDatabaseConnectionString } from '../../services/database-service.js';
import { DynamicChoicesService } from '../../services/dynamic-choices-service.js';
import { HttpError } from '../../types/errors/index.js';
import logger from '../../utils/logger.js';
export default class ConnectionString extends AuthenticatedCommand {
    static description = 'Get the connection string for your app database.';
    static examples = ['<%= config.bin %> <%= command.id %> -a APP_ID'];
    static flags = ConnectionString.serializeFlags({
        appId: Flags.integer({
            char: 'a',
            description: 'Select the app that you wish to retrieve the connection string for',
        }),
    });
    async run() {
        const { flags } = await this.parse(ConnectionString);
        let { appId } = flags;
        try {
            if (!appId) {
                appId = await DynamicChoicesService.chooseApp();
            }
            const result = await getDatabaseConnectionString(appId);
            logger.log(chalk.green('âœ“ Connection string retrieved successfully:'));
            logger.log(chalk.cyan(result.connectionString));
            this.preparePrintCommand(this, { appId });
        }
        catch (error) {
            logger.debug(error);
            if (error instanceof HttpError) {
                logger.error(`\n ${chalk.italic(chalk.red(error.message))}`);
            }
            else {
                logger.error(`An unknown error happened while fetching connection string for app id - "${appId || VAR_UNKNOWN}"`);
            }
            process.exit(1);
        }
    }
}
