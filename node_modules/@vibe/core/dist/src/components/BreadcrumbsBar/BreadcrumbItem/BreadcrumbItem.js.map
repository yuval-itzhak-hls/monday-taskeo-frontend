{"version":3,"file":"BreadcrumbItem.js","sources":["../../../../../src/components/BreadcrumbsBar/BreadcrumbItem/BreadcrumbItem.tsx"],"sourcesContent":["import { ComponentDefaultTestId, getTestId } from \"../../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { useRef } from \"react\";\nimport useIsOverflowing from \"../../../hooks/useIsOverflowing/useIsOverflowing\";\nimport Tooltip from \"../../../components/Tooltip/Tooltip\";\nimport { BreadcrumbContent } from \"./BreadcrumbContent/BreadcrumbContent\";\nimport { SubIcon, VibeComponentProps } from \"../../../types\";\nimport styles from \"./BreadcrumbItem.module.scss\";\n\nexport interface BreadcrumbItemProps extends VibeComponentProps {\n  /** The display text. */\n  text?: string;\n  /** Should item be disabled. */\n  disabled?: boolean;\n  /** Should item be clickable - this should be recieved from the breadcrumbsBar ( Navigation/Indication bar ). */\n  isClickable?: boolean;\n  /** If the item is clickable and the type of navigation is a link, this is the link */\n  link?: string;\n  /** If the item is clickable and the type of navigation is a function, this is the function */\n  onClick?: () => void;\n  /** Should be the current Item - mainly effects the item`s style. */\n  isCurrent?: boolean;\n  /** An Icon - If no icon needed then should be left empty. */\n  icon?: SubIcon;\n  showText?: boolean;\n}\n\nconst BreadcrumbItem: React.FC<BreadcrumbItemProps> = ({\n  className,\n  text = \"\",\n  disabled,\n  isClickable = false,\n  link,\n  onClick,\n  isCurrent = false,\n  icon,\n  id,\n  showText = true,\n  \"data-testid\": dataTestId\n}) => {\n  const componentRef = useRef<HTMLSpanElement>(null);\n  const isOverflowing = useIsOverflowing({ ref: componentRef });\n\n  return (\n    <Tooltip\n      disableDialogSlide={true}\n      withoutDialog={false}\n      content={(isOverflowing || !showText) && text}\n      showTrigger={[\"mouseenter\"]}\n      hideTrigger={[\"mouseleave\"]}\n      addKeyboardHideShowTriggersByDefault={!showText}\n    >\n      <li\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.BREADCRUMB_ITEM, id)}\n        className={cx(styles.breadcrumbItemWrapper, className, {\n          [styles.disabled]: disabled\n        })}\n      >\n        <BreadcrumbContent\n          ref={componentRef}\n          isClickable={isClickable}\n          link={link}\n          onClick={onClick}\n          text={text}\n          icon={icon}\n          isCurrent={isCurrent}\n          disabled={disabled}\n          showText={showText}\n        />\n      </li>\n    </Tooltip>\n  );\n};\n\nexport default BreadcrumbItem;\n"],"names":["BreadcrumbItem","_ref","className","_ref$text","text","disabled","_ref$isClickable","isClickable","link","onClick","_ref$isCurrent","isCurrent","icon","id","_ref$showText","showText","dataTestId","componentRef","useRef","isOverflowing","useIsOverflowing","ref","React","createElement","Tooltip","disableDialogSlide","withoutDialog","content","showTrigger","hideTrigger","addKeyboardHideShowTriggersByDefault","getTestId","ComponentDefaultTestId","BREADCRUMB_ITEM","cx","styles","breadcrumbItemWrapper","_defineProperty","BreadcrumbContent"],"mappings":"wcA2BA,IAAMA,EAAgD,SAAlCC,GAYf,IAXHC,EAASD,EAATC,UAASC,EAAAF,EACTG,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EACTE,EAAQJ,EAARI,SAAQC,EAAAL,EACRM,YAAAA,OAAc,IAAHD,GAAQA,EACnBE,EAAIP,EAAJO,KACAC,EAAOR,EAAPQ,QAAOC,EAAAT,EACPU,UAAAA,OAAY,IAAHD,GAAQA,EACjBE,EAAIX,EAAJW,KACAC,EAAEZ,EAAFY,GAAEC,EAAAb,EACFc,SAAAA,OAAW,IAAHD,GAAOA,EACAE,EAAUf,EAAzB,eAEMgB,EAAeC,EAAwB,MACvCC,EAAgBC,EAAiB,CAAEC,IAAKJ,IAE9C,OACEK,EAACC,cAAAC,EACC,CAAAC,oBAAoB,EACpBC,eAAe,EACfC,SAAUR,IAAkBJ,IAAaX,EACzCwB,YAAa,CAAC,cACdC,YAAa,CAAC,cACdC,sCAAuCf,GAEvCO,EACEC,cAAA,KAAA,CAAAV,GAAIA,EACS,cAAAG,GAAce,EAAUC,EAAuBC,gBAAiBpB,GAC7EX,UAAWgC,EAAGC,EAAOC,sBAAuBlC,EAASmC,KAClDF,EAAO9B,SAAWA,KAGrBiB,EAAAC,cAACe,EACC,CAAAjB,IAAKJ,EACLV,YAAaA,EACbC,KAAMA,EACNC,QAASA,EACTL,KAAMA,EACNQ,KAAMA,EACND,UAAWA,EACXN,SAAUA,EACVU,SAAUA,KAKpB"}