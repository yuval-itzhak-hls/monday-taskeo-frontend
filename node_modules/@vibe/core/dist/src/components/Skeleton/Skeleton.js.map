{"version":3,"file":"Skeleton.js","sources":["../../../../src/components/Skeleton/Skeleton.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { FC } from \"react\";\nimport {\n  SKELETON_SIZES,\n  SkeletonType as SkeletonTypeEnum,\n  SKELETON_CUSTOM_SIZE,\n  TextSkeletonSize as TextSkeletonSizeEnum\n} from \"./SkeletonConstants\";\n\nimport { SkeletonType, SkeletonSizeType } from \"./Skelton.types\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { withStaticProps, VibeComponentProps } from \"../../types\";\nimport styles from \"./Skeleton.module.scss\";\n\nexport interface SkeletonProps extends VibeComponentProps {\n  type?: SkeletonType;\n  size?: SkeletonSizeType;\n  width?: number;\n  height?: number;\n  wrapperClassName?: string;\n  /**\n   * Is the skeleton wrapper width equal to its container\n   */\n  fullWidth?: boolean;\n}\n\nconst Skeleton: FC<SkeletonProps> & {\n  types?: typeof SkeletonTypeEnum;\n  sizes?: typeof SKELETON_SIZES;\n} = ({\n  type = \"rectangle\",\n  size = \"custom\",\n  className,\n  wrapperClassName,\n  width,\n  height,\n  fullWidth = false,\n  id,\n  \"data-testid\": dataTestId\n}) => {\n  const skeletonType = (Object.values(SkeletonTypeEnum) as string[]).includes(type) ? type : \"rectangle\";\n\n  // Skeleton has sizes only for text type, other types support only custom size\n  const skeletonSize = (Object.values(TextSkeletonSizeEnum) as string[]).includes(size) ? size : SKELETON_CUSTOM_SIZE;\n\n  return (\n    <div\n      id={id}\n      className={cx(styles.skeleton, wrapperClassName, { [styles.fullWidth]: fullWidth })}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.SKELETON, id)}\n    >\n      <div\n        className={cx(styles[skeletonType], getStyle(styles, camelCase(skeletonType + \"-\" + skeletonSize)), className, {\n          [styles.fullWidth]: fullWidth\n        })}\n        style={{ width, height }}\n      />\n    </div>\n  );\n};\n\nexport default withStaticProps(Skeleton, {\n  types: SkeletonTypeEnum,\n  sizes: SKELETON_SIZES\n});\n"],"names":["withStaticProps","_ref","_ref$type","type","_ref$size","size","className","wrapperClassName","width","height","_ref$fullWidth","fullWidth","id","dataTestId","skeletonType","Object","values","SkeletonTypeEnum","includes","skeletonSize","TextSkeletonSizeEnum","SKELETON_CUSTOM_SIZE","React","createElement","cx","styles","skeleton","_defineProperty","getTestId","ComponentDefaultTestId","SKELETON","getStyle","camelCase","style","types","sizes","SKELETON_SIZES"],"mappings":"qkBA4BA,IAmCeA,EAAAA,GAhCX,SAHUC,GAaT,IAAAC,EAAAD,EATHE,KAAAA,OAAO,IAAHD,EAAG,YAAWA,EAAAE,EAAAH,EAClBI,KAAAA,OAAO,IAAHD,EAAG,SAAQA,EACfE,EAASL,EAATK,UACAC,EAAgBN,EAAhBM,iBACAC,EAAKP,EAALO,MACAC,EAAMR,EAANQ,OAAMC,EAAAT,EACNU,UAAAA,OAAY,IAAHD,GAAQA,EACjBE,EAAEX,EAAFW,GACeC,EAAUZ,EAAzB,eAEMa,EAAgBC,OAAOC,OAAOC,GAA+BC,SAASf,GAAQA,EAAO,YAGrFgB,EAAgBJ,OAAOC,OAAOI,GAAmCF,SAASb,GAAQA,EAAOgB,EAE/F,OACEC,EACEC,cAAA,MAAA,CAAAX,GAAIA,EACJN,UAAWkB,EAAGC,EAAOC,SAAUnB,EAAgBoB,KAAKF,EAAOd,UAAYA,IAC1D,cAAAE,GAAce,EAAUC,EAAuBC,SAAUlB,IAEtEU,EACEC,cAAA,MAAA,CAAAjB,UAAWkB,EAAGC,EAAOX,GAAeiB,EAASN,EAAQO,EAAUlB,EAAe,IAAMK,IAAgBb,EAASqB,EAC1GF,CAAAA,EAAAA,EAAOd,UAAYA,IAEtBsB,MAAO,CAAEzB,MAAAA,EAAOC,OAAAA,KAIxB,GAEyC,CACvCyB,MAAOjB,EACPkB,MAAOC"}