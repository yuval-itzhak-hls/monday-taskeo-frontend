{"version":3,"file":"BaseMenuItem.js","sources":["../../../../../../../src/components/Menu/MenuItem/components/BaseMenuItem/BaseMenuItem.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useRef } from \"react\";\nimport Text from \"../../../../Text/Text\";\nimport { ComponentDefaultTestId, getTestId } from \"../../../../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport { TAB_INDEX_FOCUS_WITH_JS_ONLY } from \"../../MenuItemConstants\";\nimport MenuItemSubMenuIcon from \"../MenuItemSubMenuIcon/MenuItemSubMenuIcon\";\nimport MenuItemSubMenu from \"../MenuItemSubMenu/MenuItemSubMenu\";\nimport { CloseMenuOption } from \"../../../Menu/MenuConstants\";\nimport useMenuItemMouseEvents from \"../../hooks/useMenuItemMouseEvents\";\nimport useMenuItemKeyboardEvents from \"../../hooks/useMenuItemKeyboardEvents\";\nimport useMergeRef from \"../../../../../hooks/useMergeRef\";\nimport useIsMouseEnter from \"../../../../../hooks/useIsMouseEnter\";\nimport styles from \"./BaseMenuItem.module.scss\";\nimport { BaseMenuItemProps } from \"./BaseMenuItem.types\";\n\nconst BaseMenuItem = forwardRef(\n  (\n    {\n      subMenu,\n      className,\n      menuRef,\n      disabled = false,\n      selected = false,\n      onClick,\n      activeItemIndex = -1,\n      setActiveItemIndex,\n      index,\n      id,\n      isParentMenuVisible = false,\n      resetOpenSubMenuIndex,\n      hasOpenSubMenu = false,\n      setSubMenuIsOpenByIndex,\n      closeMenu,\n      useDocumentEventListeners = false,\n      isInitialSelectedState,\n      onMouseEnter,\n      onMouseLeave,\n      shouldScrollMenu,\n      \"data-testid\": dataTestId,\n      splitMenuItem = false,\n      children,\n      submenuPosition = \"right\",\n      autoAdjustOnSubMenuContentResize\n    }: BaseMenuItemProps,\n    ref: React.ForwardedRef<HTMLElement>\n  ) => {\n    const isActive = activeItemIndex === index;\n    const isSubMenuOpen = isActive && hasOpenSubMenu;\n    const shouldShowSubMenu = !disabled && Boolean(subMenu) && isParentMenuVisible && isSubMenuOpen;\n\n    const anchorRef = useRef(null);\n    const splitMenuItemIconButtonRef = useRef(null);\n\n    const mergedRef = useMergeRef(ref, anchorRef);\n\n    const isMouseEnterMenuItem = useIsMouseEnter({ ref: anchorRef });\n    const isMouseEnterIconButton = useIsMouseEnter({ ref: splitMenuItemIconButtonRef });\n\n    useEffect(() => {\n      const anchorElement = anchorRef.current;\n      if (!isActive || !shouldScrollMenu || !anchorElement) {\n        return;\n      }\n      if (anchorElement.scrollIntoViewIfNeeded) {\n        anchorElement.scrollIntoViewIfNeeded({ behaviour: \"smooth\" });\n        return;\n      }\n      anchorElement.scrollIntoView?.({ behavior: \"smooth\", block: \"center\" });\n    }, [isActive, shouldScrollMenu]);\n\n    useEffect(() => {\n      const anchorElement = anchorRef.current;\n      if (useDocumentEventListeners) return;\n      if (isActive) {\n        anchorElement?.focus();\n      }\n    }, [isActive, useDocumentEventListeners]);\n\n    const isMouseEnter = useMenuItemMouseEvents({\n      ref: anchorRef,\n      splitMenuItemIconButtonRef,\n      resetOpenSubMenuIndex,\n      setSubMenuIsOpenByIndex,\n      isActive,\n      setActiveItemIndex,\n      index,\n      hasChildren: Boolean(subMenu),\n      splitMenuItem\n    });\n\n    const { onClickCallback } = useMenuItemKeyboardEvents({\n      onClick,\n      disabled,\n      isActive,\n      index,\n      setActiveItemIndex,\n      hasChildren: Boolean(subMenu),\n      shouldShowSubMenu,\n      setSubMenuIsOpenByIndex,\n      menuRef,\n      isMouseEnter,\n      closeMenu,\n      useDocumentEventListeners,\n      splitMenuItem,\n      isMouseEnterMenuItem,\n      isMouseEnterIconButton\n    });\n\n    const closeSubMenu = useCallback(\n      (option: CloseMenuOption = {}) => {\n        setSubMenuIsOpenByIndex(index, false);\n        if (option.propagate) {\n          closeMenu(option);\n        }\n      },\n      [setSubMenuIsOpenByIndex, index, closeMenu]\n    );\n\n    return (\n      <Text\n        id={id}\n        element=\"li\"\n        type=\"text2\"\n        aria-haspopup={subMenu ? true : undefined}\n        aria-expanded={subMenu ? shouldShowSubMenu : undefined}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.MENU_ITEM, index)}\n        className={cx(styles.item, className, {\n          [styles.disabled]: disabled,\n          [styles.focused]: isActive,\n          [styles.selected]: selected,\n          [styles.initialSelected]: isInitialSelectedState,\n          [styles.splitMenuItem]: splitMenuItem\n        })}\n        ref={mergedRef}\n        onClick={onClickCallback}\n        role=\"menuitem\"\n        aria-current={isActive}\n        onMouseLeave={onMouseLeave}\n        onMouseEnter={onMouseEnter}\n        tabIndex={TAB_INDEX_FOCUS_WITH_JS_ONLY}\n      >\n        {children}\n        {Boolean(subMenu) && (\n          <>\n            <MenuItemSubMenuIcon\n              ref={splitMenuItemIconButtonRef}\n              isSplit={splitMenuItem}\n              active={shouldShowSubMenu}\n              disabled={disabled}\n            />\n            <MenuItemSubMenu\n              anchorRef={anchorRef}\n              open={shouldShowSubMenu}\n              onClose={closeSubMenu}\n              autoFocusOnMount={!useDocumentEventListeners}\n              submenuPosition={submenuPosition}\n              autoAdjustOnSubMenuContentResize={autoAdjustOnSubMenuContentResize}\n            >\n              {subMenu}\n            </MenuItemSubMenu>\n          </>\n        )}\n      </Text>\n    );\n  }\n);\n\nexport default BaseMenuItem;\n"],"names":["BaseMenuItem","forwardRef","_ref","ref","subMenu","className","menuRef","_ref$disabled","disabled","_ref$selected","selected","onClick","_ref$activeItemIndex","activeItemIndex","setActiveItemIndex","index","id","_ref$isParentMenuVisi","isParentMenuVisible","resetOpenSubMenuIndex","_ref$hasOpenSubMenu","hasOpenSubMenu","setSubMenuIsOpenByIndex","closeMenu","_ref$useDocumentEvent","useDocumentEventListeners","isInitialSelectedState","onMouseEnter","onMouseLeave","shouldScrollMenu","dataTestId","_ref$splitMenuItem","splitMenuItem","children","_ref$submenuPosition","submenuPosition","autoAdjustOnSubMenuContentResize","isActive","shouldShowSubMenu","anchorRef","useRef","splitMenuItemIconButtonRef","mergedRef","useMergeRef","isMouseEnterMenuItem","useIsMouseEnter","isMouseEnterIconButton","useEffect","anchorElement","current","scrollIntoViewIfNeeded","behaviour","_a","scrollIntoView","call","behavior","block","focus","isMouseEnter","useMenuItemMouseEvents","hasChildren","onClickCallback","useMenuItemKeyboardEvents","closeSubMenu","useCallback","option","arguments","length","undefined","propagate","React","createElement","Text","element","type","getTestId","ComponentDefaultTestId","MENU_ITEM","cx","styles","item","_defineProperty","focused","initialSelected","role","tabIndex","TAB_INDEX_FOCUS_WITH_JS_ONLY","Fragment","MenuItemSubMenuIcon","isSplit","active","MenuItemSubMenu","open","onClose","autoFocusOnMount"],"mappings":"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"}