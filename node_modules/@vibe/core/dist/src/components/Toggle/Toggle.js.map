{"version":3,"file":"Toggle.js","sources":["../../../../src/components/Toggle/Toggle.tsx"],"sourcesContent":["import React, { ChangeEvent, forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { noop as NOOP } from \"lodash-es\";\nimport { Switch } from \"../Switch/Switch\";\nimport { MockToggle } from \"./MockToggle\";\nimport { VibeComponent, VibeComponentProps } from \"../../types\";\nimport styles from \"./Toggle.module.scss\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { ToggleSize } from \"./Toggle.types\";\n\nexport interface ToggleProps extends VibeComponentProps {\n  /**\n   * ClassName to override styles of selected toggle\n   */\n  toggleSelectedClassName?: string;\n  isDefaultSelected?: boolean;\n  isSelected?: boolean;\n  onChange?: (value: boolean, event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string;\n  name?: string;\n  disabled?: boolean;\n  areLabelsHidden?: boolean;\n  onOverrideText?: string;\n  offOverrideText?: string;\n  ariaLabel?: string;\n  ariaControls?: string;\n  size?: ToggleSize;\n}\n\nconst Toggle: VibeComponent<ToggleProps, HTMLInputElement> = forwardRef(\n  (\n    {\n      id,\n      className,\n      toggleSelectedClassName,\n      isDefaultSelected = true,\n      isSelected,\n      onChange = NOOP,\n      value,\n      name,\n      disabled,\n      ariaLabel,\n      ariaControls,\n      areLabelsHidden = false,\n      onOverrideText = \"On\",\n      offOverrideText = \"Off\",\n      size = \"medium\",\n      \"data-testid\": dataTestId\n    }: ToggleProps,\n    ref\n  ) => {\n    const wrapperClassName = cx(styles.wrapper);\n    const inputClassName = cx(styles.toggleInput);\n\n    return (\n      <Switch\n        defaultChecked={isDefaultSelected}\n        checked={isSelected}\n        id={id}\n        wrapperClassName={wrapperClassName}\n        onChange={onChange}\n        value={value}\n        name={name}\n        disabled={disabled}\n        ariaLabel={ariaLabel}\n        ariaControls={ariaControls}\n        inputClassName={inputClassName}\n        ref={ref}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TOGGLE)}\n      >\n        <MockToggle\n          areLabelsHidden={areLabelsHidden}\n          offOverrideText={offOverrideText}\n          onOverrideText={onOverrideText}\n          disabled={disabled}\n          className={className}\n          selectedClassName={toggleSelectedClassName}\n          size={size}\n        />\n      </Switch>\n    );\n  }\n);\n\nexport default Toggle;\n"],"names":["Toggle","forwardRef","_ref","ref","id","className","toggleSelectedClassName","_ref$isDefaultSelecte","isDefaultSelected","isSelected","_ref$onChange","onChange","NOOP","value","name","disabled","ariaLabel","ariaControls","_ref$areLabelsHidden","areLabelsHidden","_ref$onOverrideText","onOverrideText","_ref$offOverrideText","offOverrideText","_ref$size","size","dataTestId","wrapperClassName","cx","styles","wrapper","inputClassName","toggleInput","React","createElement","Switch","defaultChecked","checked","getTestId","ComponentDefaultTestId","TOGGLE","MockToggle","selectedClassName"],"mappings":"iTA6BMA,IAAAA,EAAuDC,GAC3D,SAAAC,EAmBEC,GACE,IAlBAC,EAAEF,EAAFE,GACAC,EAASH,EAATG,UACAC,EAAuBJ,EAAvBI,wBAAuBC,EAAAL,EACvBM,kBAAAA,OAAoB,IAAHD,GAAOA,EACxBE,EAAUP,EAAVO,WAAUC,EAAAR,EACVS,SAAAA,OAAWC,IAAHF,EAAGE,EAAIF,EACfG,EAAKX,EAALW,MACAC,EAAIZ,EAAJY,KACAC,EAAQb,EAARa,SACAC,EAASd,EAATc,UACAC,EAAYf,EAAZe,aAAYC,EAAAhB,EACZiB,gBAAAA,OAAkB,IAAHD,GAAQA,EAAAE,EAAAlB,EACvBmB,eAAAA,OAAiB,IAAHD,EAAG,KAAIA,EAAAE,EAAApB,EACrBqB,gBAAAA,OAAkB,IAAHD,EAAG,MAAKA,EAAAE,EAAAtB,EACvBuB,KAAAA,OAAO,IAAHD,EAAG,SAAQA,EACAE,EAAUxB,EAAzB,eAIIyB,EAAmBC,EAAGC,EAAOC,SAC7BC,EAAiBH,EAAGC,EAAOG,aAEjC,OACEC,EAACC,cAAAC,EACC,CAAAC,eAAgB5B,EAChB6B,QAAS5B,EACTL,GAAIA,EACJuB,iBAAkBA,EAClBhB,SAAUA,EACVE,MAAOA,EACPC,KAAMA,EACNC,SAAUA,EACVC,UAAWA,EACXC,aAAcA,EACdc,eAAgBA,EAChB5B,IAAKA,EACQ,cAAAuB,GAAcY,EAAUC,EAAuBC,SAE5DP,EAAAC,cAACO,EAAU,CACTtB,gBAAiBA,EACjBI,gBAAiBA,EACjBF,eAAgBA,EAChBN,SAAUA,EACVV,UAAWA,EACXqC,kBAAmBpC,EACnBmB,KAAMA,IAId"}