{"version":3,"file":"CustomSvgIcon.js","sources":["../../../../../src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx"],"sourcesContent":["import React, { FunctionComponent, useCallback, AriaRole, Ref } from \"react\";\nimport SVG from \"react-inlinesvg\";\nimport useIconScreenReaderAccessProps from \"../../../hooks/useIconScreenReaderAccessProps\";\nimport VibeComponentProps from \"../../../types/VibeComponentProps\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { useIsMounted } from \"../../../hooks/ssr/useIsMounted\";\n\nfunction modifySvgCode(svg: string, color = \"currentColor\") {\n  return svg.replace(/fill=\".*?\"/g, `fill=\"${color}\"`);\n}\n\nexport interface CustomSvgIconProps extends VibeComponentProps {\n  onClick?: (event: React.MouseEvent) => void;\n  src: string | object;\n  ariaLabel?: string;\n  tabIndex?: number;\n  role?: AriaRole;\n  ariaHidden?: boolean;\n  clickable?: boolean;\n  replaceToCurrentColor?: boolean;\n  customColor?: string;\n  ref?: Ref<SVGElement>;\n}\n\nconst CustomSvgIcon: FunctionComponent<CustomSvgIconProps> = ({\n  className,\n  ref,\n  src,\n  onClick,\n  clickable,\n  ariaLabel,\n  ariaHidden,\n  replaceToCurrentColor = false,\n  customColor,\n  id,\n  \"data-testid\": dataTestId\n}) => {\n  const screenReaderAccessProps = useIconScreenReaderAccessProps({\n    isClickable: clickable,\n    label: ariaLabel,\n    isDecorationOnly: ariaHidden\n  });\n\n  const isMounted = useIsMounted();\n\n  const svgProcessor = useCallback(\n    (svg: string) => {\n      if (replaceToCurrentColor) return modifySvgCode(svg, \"currentColor\");\n      if (customColor) return modifySvgCode(svg, customColor);\n      return svg;\n    },\n    [replaceToCurrentColor, customColor]\n  );\n\n  if (typeof src !== \"string\") return null;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const SVGComponent = (SVG.default || SVG) as React.FC<any>; // fix esm issue\n\n  const PlaceHolder = <div className={className} id={id}></div>;\n\n  if (!isMounted) {\n    // placeholder for server side rendering\n    return PlaceHolder;\n  }\n  return (\n    <SVGComponent\n      innerRef={ref}\n      {...screenReaderAccessProps}\n      onClick={onClick}\n      loader={PlaceHolder} // avoid flickering\n      src={src}\n      className={className}\n      preProcessor={svgProcessor}\n      id={id}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.SVG_ICON, id)}\n    >\n      {PlaceHolder}\n    </SVGComponent>\n  );\n};\n\nexport default CustomSvgIcon;\n"],"names":["modifySvgCode","svg","replace","concat","arguments","length","undefined","CustomSvgIcon","_ref","className","ref","src","onClick","_ref$replaceToCurrent","replaceToCurrentColor","customColor","id","dataTestId","screenReaderAccessProps","useIconScreenReaderAccessProps","isClickable","clickable","label","ariaLabel","isDecorationOnly","ariaHidden","isMounted","useIsMounted","svgProcessor","useCallback","SVGComponent","SVG","default","PlaceHolder","React","createElement","Object","assign","innerRef","loader","preProcessor","getTestId","ComponentDefaultTestId","SVG_ICON"],"mappings":"mUAQA,SAASA,EAAcC,GACrB,OAAOA,EAAIC,QAAQ,uBAAaC,OADOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,eACM,KAClD,CAeA,IAAMG,EAAuD,SAA1CC,GAYd,IAXHC,EAASD,EAATC,UACAC,EAAGF,EAAHE,IACAC,EAAGH,EAAHG,IACAC,EAAOJ,EAAPI,QAGUC,EAAAL,EACVM,sBAAAA,OAAwB,IAAHD,GAAQA,EAC7BE,EAAWP,EAAXO,YACAC,EAAER,EAAFQ,GACeC,EAAUT,EAAzB,eAEMU,EAA0BC,EAA+B,CAC7DC,YATOZ,EAATa,UAUEC,MATOd,EAATe,UAUEC,iBATQhB,EAAViB,aAYMC,EAAYC,IAEZC,EAAeC,GACnB,SAAC5B,GACC,OAAIa,EAA8Bd,EAAcC,EAAK,gBACjDc,EAAoBf,EAAcC,EAAKc,GACpCd,CACT,GACA,CAACa,EAAuBC,IAG1B,GAAmB,iBAARJ,EAAkB,OAAO,KAGpC,IAAMmB,EAAgBC,EAAIC,SAAWD,EAE/BE,EAAcC,EAAAC,cAAA,MAAA,CAAK1B,UAAWA,EAAWO,GAAIA,IAEnD,OAAKU,EAKHQ,gBAACJ,EAAYM,OAAAC,OAAA,CACXC,SAAU5B,GACNQ,EACJ,CAAAN,QAASA,EACT2B,OAAQN,EACRtB,IAAKA,EACLF,UAAWA,EACX+B,aAAcZ,EACdZ,GAAIA,EACS,cAAAC,GAAcwB,EAAUC,EAAuBC,SAAU3B,KAErEiB,GAdIA,CAiBX"}