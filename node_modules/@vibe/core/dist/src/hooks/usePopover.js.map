{"version":3,"file":"usePopover.js","sources":["../../../src/hooks/usePopover.ts"],"sourcesContent":["import { useMemo } from \"react\";\nimport { usePopper } from \"react-popper\";\nimport { Placement } from \"./popoverConstants\";\nimport useIsomorphicLayoutEffect from \"./ssr/useIsomorphicLayoutEffect\";\nimport useForceUpdate from \"./useForceUpdate\";\nimport type { Options, State } from \"@popperjs/core\";\nimport { createObserveContentResizeModifier } from \"../components/Dialog/modifiers/observeContentResizeModifier\";\n\nconst { RIGHT_START, RIGHT_END, LEFT_START, LEFT_END } = Placement;\n\nconst FLIP_MODIFIER = {\n  name: \"flip\",\n  options: {\n    fallbackPlacements: [RIGHT_END, LEFT_START, LEFT_END]\n  }\n};\n\nexport default function usePopover(\n  referenceElement: HTMLElement,\n  popperElement: HTMLElement,\n  {\n    isOpen,\n    placement = RIGHT_START,\n    observeContentResize\n  }: {\n    isOpen?: boolean;\n    placement?: Placement;\n    observeContentResize?: boolean;\n  }\n) {\n  const forceUpdate = useForceUpdate();\n\n  // we have to use forceUpdate because\n  // usePopper need to run again after any refs changes, even after the first render.\n  useIsomorphicLayoutEffect(() => {\n    forceUpdate();\n  }, [referenceElement, popperElement, forceUpdate]);\n\n  const popperOptions: Pick<Options, \"placement\" | \"modifiers\"> = useMemo(() => {\n    return {\n      placement,\n      modifiers: [\n        FLIP_MODIFIER,\n        {\n          name: \"displayNone\",\n          enabled: true,\n          phase: \"write\",\n          fn: ({ state }: { state: State }) => {\n            state.styles.popper.visibility = isOpen ? \"visible\" : \"hidden\";\n            return state;\n          }\n        },\n        createObserveContentResizeModifier(observeContentResize)\n      ]\n    };\n  }, [isOpen, placement, observeContentResize]);\n\n  const { styles, attributes } = usePopper(referenceElement, popperElement, popperOptions);\n\n  return { styles, attributes };\n}\n"],"names":["RIGHT_START","Placement","FLIP_MODIFIER","name","options","fallbackPlacements","RIGHT_END","LEFT_START","LEFT_END","usePopover","referenceElement","popperElement","_ref","isOpen","_ref$placement","placement","observeContentResize","forceUpdate","useForceUpdate","useIsomorphicLayoutEffect","popperOptions","useMemo","modifiers","enabled","phase","fn","_ref2","state","styles","popper","visibility","createObserveContentResizeModifier","_usePopper","usePopper","attributes"],"mappings":"oUAQA,IAAQA,EAAiDC,EAAjDD,YAEFE,EAAgB,CACpBC,KAAM,OACNC,QAAS,CACPC,mBAAoB,CALiCJ,EAApCK,UAAoCL,EAAzBM,WAAyBN,EAAbO,YAS9B,SAAUC,EACtBC,EACAC,EAA0BC,GASzB,IAPCC,EAAMD,EAANC,OAAMC,EAAAF,EACNG,UAAAA,OAAYf,IAAHc,EAAGd,EAAWc,EACvBE,EAAoBJ,EAApBI,qBAOIC,EAAcC,IAIpBC,GAA0B,WACxBF,GACD,GAAE,CAACP,EAAkBC,EAAeM,IAErC,IAAMG,EAA0DC,GAAQ,WACtE,MAAO,CACLN,UAAAA,EACAO,UAAW,CACTpB,EACA,CACEC,KAAM,cACNoB,SAAS,EACTC,MAAO,QACPC,GAAI,SAAAC,GAAgC,IAA7BC,EAAKD,EAALC,MAEL,OADAA,EAAMC,OAAOC,OAAOC,WAAajB,EAAS,UAAY,SAC/Cc,CACT,GAEFI,EAAmCf,IAGxC,GAAE,CAACH,EAAQE,EAAWC,IAEvBgB,EAA+BC,EAAUvB,EAAkBC,EAAeS,GAE1E,MAAO,CAAEQ,OAFKI,EAANJ,OAESM,WAFSF,EAAVE,WAGlB"}