import React from "react";
import { ButtonValue } from "./ButtonGroupConstants";
import { ButtonType as ButtonTypeEnum } from "../Button/ButtonConstants";
import { ButtonType, ButtonSize } from "../Button/Button.types";
import { SubIcon, VibeComponent, VibeComponentProps } from "../../types";
import { MoveBy } from "../../types/MoveBy";
import { TooltipPositions } from "../Tooltip/Tooltip.types";
type ButtonGroupOption = {
    icon?: SubIcon;
    leftIcon?: SubIcon;
    ariaLabel?: string;
    subText?: string;
    value: ButtonValue;
    text: string;
    disabled?: boolean;
    tooltipContent?: string;
};
export interface ButtonGroupProps extends VibeComponentProps {
    options: Array<ButtonGroupOption>;
    value?: ButtonValue;
    onSelect?: (value: ButtonValue, name: string) => void;
    size?: ButtonSize;
    kind?: Extract<ButtonType, "secondary" | "tertiary">;
    name?: string;
    disabled?: boolean;
    groupAriaLabel?: string;
    /**
     * Where the tooltip should be in reference to the children: Top, Left, Right, Bottom ...
     */
    tooltipPosition?: TooltipPositions;
    tooltipHideDelay?: number;
    tooltipShowDelay?: number;
    tooltipContainerSelector?: string;
    tooltipMoveBy?: MoveBy;
    children?: React.ReactNode;
    fullWidth?: boolean;
}
declare const _default: ((VibeComponent<ButtonGroupProps & React.RefAttributes<HTMLDivElement>, HTMLDivElement> & Partial<{
    sizes: {
        readonly SMALL: "small";
        readonly MEDIUM: "medium";
        readonly LARGE: "large";
        readonly XXS: "xxs";
        readonly XS: "xs";
    };
    kinds: typeof ButtonTypeEnum;
}>) | (React.FC<ButtonGroupProps & React.RefAttributes<HTMLDivElement>> & Partial<{
    sizes: {
        readonly SMALL: "small";
        readonly MEDIUM: "medium";
        readonly LARGE: "large";
        readonly XXS: "xxs";
        readonly XS: "xs";
    };
    kinds: typeof ButtonTypeEnum;
}>)) & {
    sizes: {
        readonly SMALL: "small";
        readonly MEDIUM: "medium";
        readonly LARGE: "large";
        readonly XXS: "xxs";
        readonly XS: "xs";
    };
    kinds: typeof ButtonTypeEnum;
};
export default _default;
