{"version":3,"file":"ButtonGroup.js","sources":["../../../../../src/components/ButtonGroup/ButtonGroup.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { camelCase } from \"lodash-es\";\nimport cx from \"classnames\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport Button from \"../Button/Button\";\nimport usePrevious from \"../../hooks/usePrevious\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { ButtonValue } from \"./ButtonGroupConstants\";\nimport { ButtonWrapper } from \"./ButtonWrapper\";\nimport { SIZES } from \"../../constants\";\nimport { ButtonType as ButtonTypeEnum } from \"../Button/ButtonConstants\";\nimport { ButtonType, ButtonSize } from \"../Button/Button.types\";\nimport { SubIcon, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { MoveBy } from \"../../types/MoveBy\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport styles from \"./ButtonGroup.module.scss\";\nimport { TooltipPositions } from \"../Tooltip/Tooltip.types\";\n\ntype ButtonGroupOption = {\n  icon?: SubIcon;\n  leftIcon?: SubIcon;\n  ariaLabel?: string;\n  subText?: string;\n  value: ButtonValue;\n  text: string;\n  disabled?: boolean;\n  tooltipContent?: string;\n};\n\nexport interface ButtonGroupProps extends VibeComponentProps {\n  options: Array<ButtonGroupOption>;\n  value?: ButtonValue;\n  onSelect?: (value: ButtonValue, name: string) => void;\n  size?: ButtonSize;\n  kind?: Extract<ButtonType, \"secondary\" | \"tertiary\">;\n  name?: string;\n  disabled?: boolean;\n  groupAriaLabel?: string;\n  /**\n   * Where the tooltip should be in reference to the children: Top, Left, Right, Bottom ...\n   */\n  tooltipPosition?: TooltipPositions;\n  tooltipHideDelay?: number;\n  tooltipShowDelay?: number;\n  tooltipContainerSelector?: string;\n  tooltipMoveBy?: MoveBy;\n  children?: React.ReactNode;\n  fullWidth?: boolean;\n}\n\nconst ButtonGroup: VibeComponent<ButtonGroupProps, HTMLDivElement> & {\n  sizes?: typeof SIZES;\n  kinds?: typeof ButtonTypeEnum;\n} = forwardRef(\n  (\n    {\n      className,\n      options,\n      name = \"\",\n      disabled = false,\n      value = \"\",\n      onSelect,\n      size = \"small\",\n      kind = \"secondary\",\n      groupAriaLabel = \"\",\n      tooltipPosition,\n      tooltipHideDelay,\n      tooltipShowDelay,\n      tooltipContainerSelector,\n      tooltipMoveBy,\n      id,\n      \"data-testid\": dataTestId,\n      fullWidth = false\n    }: ButtonGroupProps,\n    ref\n  ) => {\n    const inputRef = useRef();\n    const mergedRef = useMergeRef(ref, inputRef);\n\n    const [valueState, setValueState] = useState(value);\n    const prevValue = usePrevious(value);\n\n    const onClick = useCallback(\n      (option: ButtonGroupOption) => {\n        const isDisabled = disabled || option.disabled;\n        if (!isDisabled) {\n          setValueState(option.value);\n          if (onSelect) {\n            onSelect(option.value, name);\n          }\n        }\n      },\n      [onSelect, disabled, name]\n    );\n\n    const selectedOption = useMemo(() => {\n      return options.find(option => option.value === valueState);\n    }, [options, valueState]);\n\n    const Buttons = useMemo(() => {\n      return options.map((option, index) => {\n        const isSelected = option.value === valueState;\n        return (\n          <ButtonWrapper\n            key={option.value}\n            size={size}\n            onClick={() => onClick(option)}\n            rightIcon={option.icon}\n            leftIcon={option.leftIcon}\n            active={isSelected}\n            rightFlat={index !== options.length - 1}\n            leftFlat={index !== 0}\n            kind=\"tertiary\"\n            preventClickAnimation\n            ariaLabel={option.ariaLabel}\n            tooltipContent={option.tooltipContent}\n            tooltipPosition={tooltipPosition}\n            tooltipHideDelay={tooltipHideDelay}\n            tooltipShowDelay={tooltipShowDelay}\n            tooltipContainerSelector={tooltipContainerSelector}\n            tooltipMoveBy={tooltipMoveBy}\n            className={cx(styles.button, styles.optionText, {\n              [styles.selected]: isSelected,\n              [styles.disabled]: disabled,\n              [styles.buttonDisabled]: option.disabled,\n              [styles.fullWidth]: fullWidth\n            })}\n            activeButtonClassName={styles.activeButton}\n          >\n            {option.text}\n          </ButtonWrapper>\n        );\n      });\n    }, [\n      options,\n      valueState,\n      size,\n      tooltipPosition,\n      tooltipHideDelay,\n      tooltipShowDelay,\n      tooltipContainerSelector,\n      tooltipMoveBy,\n      disabled,\n      fullWidth,\n      onClick\n    ]);\n\n    // Effects\n    useEffect(() => {\n      // Update value if changed from props\n      if (value !== prevValue && value !== valueState) {\n        setValueState(value);\n      }\n    }, [value, prevValue, valueState, setValueState]);\n\n    return (\n      <div\n        className={cx(styles.buttonGroup, className, getStyle(styles, camelCase(\"kind-\" + kind)), {\n          [styles.disabled]: disabled\n        })}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.BUTTON_GROUP, id)}\n        ref={mergedRef}\n      >\n        <div role=\"group\" aria-label={groupAriaLabel} className={cx(styles.buttonsContainer)} aria-disabled={disabled}>\n          {Buttons}\n        </div>\n        {selectedOption && selectedOption.subText && (\n          <div className={cx(styles.subTextContainer)}>{selectedOption.subText}</div>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default withStaticProps(ButtonGroup, { sizes: Button.sizes, kinds: Button.kinds });\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","options","_ref$name","name","_ref$disabled","disabled","_ref$value","value","onSelect","_ref$size","size","_ref$kind","kind","_ref$groupAriaLabel","groupAriaLabel","tooltipPosition","tooltipHideDelay","tooltipShowDelay","tooltipContainerSelector","tooltipMoveBy","id","dataTestId","_ref$fullWidth","fullWidth","inputRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","valueState","setValueState","prevValue","usePrevious","onClick","useCallback","option","selectedOption","useMemo","find","Buttons","map","index","isSelected","React","ButtonWrapper","key","rightIcon","icon","leftIcon","active","rightFlat","length","leftFlat","preventClickAnimation","ariaLabel","tooltipContent","cx","styles","button","optionText","_defineProperty","selected","buttonDisabled","activeButtonClassName","activeButton","text","useEffect","buttonGroup","getStyle","camelCase","getTestId","ComponentDefaultTestId","BUTTON_GROUP","createElement","role","buttonsContainer","subText","subTextContainer","sizes","Button","kinds"],"mappings":"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"}