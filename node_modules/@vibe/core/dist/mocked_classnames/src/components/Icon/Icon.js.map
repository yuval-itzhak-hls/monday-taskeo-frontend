{"version":3,"file":"Icon.js","sources":["../../../../../src/components/Icon/Icon.tsx"],"sourcesContent":["import { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { CSSProperties, forwardRef, Ref } from \"react\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { IconType as IconTypeEnum } from \"./IconConstants\";\nimport { IconType } from \"./Icon.types\";\nimport CustomSvgIcon from \"./CustomSvgIcon/CustomSvgIcon\";\nimport FontIcon from \"./FontIcon/FontIcon\";\nimport useIconProps from \"./hooks/useIconProps\";\nimport { VibeComponentProps, VibeComponent, SubIcon, withStaticProps } from \"../../types\";\n\nexport interface IconSubComponentProps {\n  ref?: Ref<HTMLElement>;\n  id?: string;\n  size?: string | number;\n  className?: string;\n  style?: CSSProperties;\n  \"data-testid\"?: string;\n}\n\nfunction renderIcon(Icon: SubIcon, props: IconSubComponentProps) {\n  const dataTestId = props[\"data-testid\"];\n  return <Icon {...props} data-testid={dataTestId || getTestId(ComponentDefaultTestId.ICON, props.id)} />;\n}\n\nexport interface IconProps extends VibeComponentProps {\n  /**\n   * We support three types of icons - SVG, FONT and SRC (classname) so this prop is either the name of the icon or the component\n   */\n  icon: SubIcon;\n  /**\n   * Icon aria label [aria label](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)\n   */\n  iconLabel?: string;\n  /**\n   *  The type of the component - svg, font or custom svg (using [`react-inlinesvg`](https://github.com/gilbarbara/react-inlinesvg#readme))\n   */\n  iconType?: IconType;\n  /**\n   * Size for font icon\n   */\n  iconSize?: number | string;\n  /**\n   * Remove focus style\n   */\n  ignoreFocusStyle?: boolean;\n  tabindex?: number | string;\n  /**\n   * Hide icon asset from screen reader. No need to set value for this prop when `clickable` is false\n   */\n  ariaHidden?: boolean;\n  style?: React.CSSProperties;\n  /**\n   * When using svg from src (Icon.type.SRC) this boolean will transform the \"fill\" property to \"currentColor\"\n   */\n  useCurrentColor?: boolean;\n  /**\n   * Override the default color with a custom one\n   */\n  customColor?: string;\n}\n\nconst Icon: VibeComponent<IconProps, HTMLElement> & { type?: typeof IconTypeEnum } = forwardRef(\n  (\n    {\n      /**\n       * component id\n       */\n      id,\n      className,\n      icon = \"\",\n      iconLabel,\n      iconType = \"svg\",\n      iconSize = 16,\n      ignoreFocusStyle = false,\n      tabindex: externalTabIndex,\n      ariaHidden,\n      style,\n      useCurrentColor = false,\n      customColor,\n      \"data-testid\": dataTestId\n    }: IconProps,\n    ref\n  ) => {\n    const overrideExternalTabIndex = externalTabIndex && +externalTabIndex;\n    const { screenReaderAccessProps, onClickCallback, computedClassName, iconRef } = useIconProps({\n      iconLabel,\n      className,\n      isDecorationOnly: ariaHidden,\n      ignoreFocusStyle,\n      externalTabIndex: overrideExternalTabIndex\n    });\n\n    const mergedRef = useMergeRef(ref, iconRef);\n\n    if (!icon) {\n      return null;\n    }\n\n    // TODO: [breaking] make more accurate check\n    const isFunctionType = typeof icon === \"function\";\n\n    const overrideDataTestId = dataTestId || getTestId(ComponentDefaultTestId.ICON, id);\n\n    // TODO: [breaking] make more accurate check\n    if (iconType === \"svg\" || isFunctionType || typeof icon === \"object\") {\n      return renderIcon(icon, {\n        id,\n        ...screenReaderAccessProps,\n        ref: isFunctionType ? undefined : mergedRef,\n        size: iconSize.toString(),\n        className: computedClassName,\n        style,\n        \"data-testid\": overrideDataTestId\n      });\n    }\n    if (iconType === \"src\") {\n      return (\n        <CustomSvgIcon\n          id={id}\n          src={icon}\n          {...screenReaderAccessProps}\n          className={cx(computedClassName)}\n          onClick={onClickCallback}\n          replaceToCurrentColor={useCurrentColor}\n          customColor={customColor}\n          data-testid={overrideDataTestId}\n        />\n      );\n    }\n    return (\n      <FontIcon\n        id={id}\n        {...screenReaderAccessProps}\n        className={cx(computedClassName)}\n        onClick={onClickCallback}\n        ref={mergedRef}\n        icon={icon}\n        data-testid={overrideDataTestId}\n      />\n    );\n  }\n);\n\nexport default withStaticProps(Icon, {\n  type: IconTypeEnum\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","id","_ref$icon","icon","_ref$iconType","iconType","_ref$iconSize","iconSize","_ref$ignoreFocusStyle","ignoreFocusStyle","externalTabIndex","tabindex","style","_ref$useCurrentColor","useCurrentColor","customColor","dataTestId","_useIconProps","useIconProps","iconLabel","className","isDecorationOnly","ariaHidden","screenReaderAccessProps","onClickCallback","computedClassName","mergedRef","useMergeRef","iconRef","isFunctionType","overrideDataTestId","getTestId","ComponentDefaultTestId","ICON","_typeof","Icon","props","React","Object","assign","renderIcon","undefined","size","createElement","CustomSvgIcon","src","cx","onClick","replaceToCurrentColor","FontIcon","type","IconTypeEnum"],"mappings":"ohBA8DA,IAkFeA,EAAAA,EAlFsEC,GACnF,SAAAC,EAmBEC,GACE,IAfAC,EAAEF,EAAFE,GACSC,EAAAH,EACTI,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EACAE,EAAAL,EACTM,SAAAA,OAAW,IAAHD,EAAG,MAAKA,EAAAE,EAAAP,EAChBQ,SAAAA,OAAW,IAAHD,EAAG,GAAEA,EAAAE,EAAAT,EACbU,iBACUC,EAAgBX,EAA1BY,SAEAC,EAAKb,EAALa,MAAKC,EAAAd,EACLe,gBAAAA,OAAkB,IAAHD,GAAQA,EACvBE,EAAWhB,EAAXgB,YACeC,EAAUjB,EAAzB,eAKFkB,EAAiFC,EAAa,CAC5FC,UAfSpB,EAAToB,UAgBAC,UAlBSrB,EAATqB,UAmBAC,iBAZUtB,EAAVuB,WAaAb,sBAfmB,IAAHD,GAAQA,EAgBxBE,iBAN+BA,IAAqBA,IAC9Ca,EAAuBN,EAAvBM,wBAAyBC,EAAeP,EAAfO,gBAAiBC,EAAiBR,EAAjBQ,kBAQ5CC,EAAYC,EAAY3B,EAR8CiB,EAAPW,SAUrE,IAAKzB,EACH,OAAO,KAIT,IAAM0B,EAAiC,mBAAT1B,EAExB2B,EAAqBd,GAAce,EAAUC,EAAuBC,KAAMhC,GAGhF,MAAiB,QAAbI,GAAsBwB,GAAkC,WAAhBK,EAAO/B,GArFvD,SAAoBgC,EAAeC,GAEjC,OAAOC,gBAACF,EAAIG,OAAAC,OAAA,CAAA,EAAKH,EAAoB,CAAA,cADlBA,EAAM,gBAC0BL,EAAUC,EAAuBC,KAAMG,EAAMnC,MAClG,CAmFauC,CAAWrC,EAChBmC,OAAAC,OAAAD,OAAAC,OAAA,CAAAtC,GAAAA,GACGsB,GAAuB,CAC1BvB,IAAK6B,OAAiBY,EAAYf,EAClCgB,KAAMnC,KACNa,UAAWK,EACXb,MAAAA,EACA,cAAekB,KAGF,QAAbzB,EAEAgC,EAACM,cAAAC,EACCN,OAAAC,OAAA,CAAAtC,GAAIA,EACJ4C,IAAK1C,GACDoB,EACJ,CAAAH,UAAW0B,EAAGrB,GACdsB,QAASvB,EACTwB,sBAAuBlC,EACvBC,YAAaA,EAAW,cACXe,KAKjBO,EAAAM,cAACM,EAAQX,OAAAC,OAAA,CACPtC,GAAIA,GACAsB,EACJ,CAAAH,UAAW0B,EAAGrB,GACdsB,QAASvB,EACTxB,IAAK0B,EACLvB,KAAMA,EAAI,cACG2B,IAGnB,IAGmC,CACnCoB,KAAMC"}