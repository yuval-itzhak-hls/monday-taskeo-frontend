{"version":3,"file":"Tooltip.js","sources":["../../../../../src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport { camelCase, isFunction } from \"lodash-es\";\nimport cx from \"classnames\";\nimport React, { CSSProperties, isValidElement, PureComponent, ReactElement } from \"react\";\nimport { Modifier } from \"react-popper\";\nimport Dialog from \"../Dialog/Dialog\";\nimport { DialogAnimationType, DialogTriggerEvent } from \"../Dialog/Dialog.types\";\nimport { HideShowEvent as HideShowEventEnum, AnimationType as AnimationTypeEnum } from \"../Dialog/DialogConstants\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport { TooltipTheme as TooltipThemeEnum, TooltipPositions as TooltipPositionsEnum } from \"./TooltipConstants\";\nimport { ElementContent } from \"../../types/ElementContent\";\nimport { MoveBy } from \"../../types/MoveBy\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport styles from \"./Tooltip.module.scss\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { SubIcon } from \"../../types\";\nimport Icon from \"../Icon/Icon\";\nimport Flex from \"../Flex/Flex\";\nimport { TooltipPositions, TooltipTheme } from \"./Tooltip.types\";\n\nexport type TooltipProps = TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps);\n\ninterface TooltipWithoutChildrenProps {\n  /**\n   * When true, the tooltip would be rendered on a Dialog without children\n   * Use case is currently for rendering Tipseen with floating prop\n   */\n  forceRenderWithoutChildren: boolean;\n  children?: ReactElement | Array<ReactElement>;\n}\n\ninterface TooltipWithChildrenProps {\n  forceRenderWithoutChildren?: boolean;\n  children: ReactElement | Array<ReactElement>;\n}\n\n// TODO TS-migration extend DialogProps, once Dialog is migrated to TS\ninterface TooltipBaseProps extends VibeComponentProps {\n  content: ElementContent;\n  style?: CSSProperties;\n  /** Class name for a tooltip's arrow */\n  arrowClassName?: string;\n  /**\n   * How much to move the dialog in relative to children\n   * main is the axis in which the position is aligned to\n   * secondary is the vertical axes to the position\n   */\n  moveBy?: MoveBy;\n  theme?: TooltipTheme;\n  getContainer?: () => HTMLElement;\n  /**\n   * how much delay should the Dialog wait until it should trigger the hide in MS\n   */\n  hideDelay?: number;\n  /**\n   * how much delay should the Dialog wait until it should trigger the show in MS\n   */\n  showDelay?: number;\n  disableDialogSlide?: boolean;\n  animationType?: DialogAnimationType;\n  withoutDialog?: boolean;\n  /**\n   * the container selector in which to append the dialog\n   * for examples: \"body\" , \".my-class\", \"#my-id\"\n   */\n  containerSelector?: string;\n  /**\n   * With which delay tooltip is going to be shown\n   */\n  immediateShowDelay?: number;\n  /**\n   * when false, the arrow of the tooltip is hidden\n   */\n  tip?: boolean;\n  /**\n   * Show the Dialog when the children is mounting\n   */\n  shouldShowOnMount?: boolean;\n  hideWhenReferenceHidden?: boolean;\n  onTooltipHide?: () => void;\n  onTooltipShow?: () => void;\n  /**\n   * PopperJS Modifiers type\n   * https://popper.js.org/docs/v2/modifiers/\n   */\n  modifiers?: Array<Modifier<unknown>>;\n  /**\n   * Where the tooltip should be in reference to the children: Top, Left, Right, Bottom ...\n   */\n  position?: TooltipPositions;\n  /**\n   * an array of hide/show trigger - Tooltip.hideShowTriggers\n   */\n  showTrigger?: DialogTriggerEvent | Array<DialogTriggerEvent>;\n  /**\n   * an array of hide/show trigger - Tooltip.hideShowTriggers\n   */\n  hideTrigger?: DialogTriggerEvent | Array<DialogTriggerEvent>;\n  /**\n   * If true, prevents open Tooltip from closing on mouseEnter and closes Tooltip, when mouse leaves it\n   */\n  showOnDialogEnter?: boolean;\n  /**\n   * A Classname to be added to <span> element which wraps the children\n   */\n  referenceWrapperClassName?: string;\n  /**\n   * Treats keyboard focus/blur events as mouse-enter/mouse-leave events\n   */\n  addKeyboardHideShowTriggersByDefault?: boolean;\n  /**\n   * set the state of the tooltip - open/close - controlled component\n   */\n  open?: boolean;\n  /**\n   * Overwrites z-index of the tooltip\n   */\n  zIndex?: number;\n  /**\n   * The title of the tooltip\n   */\n  title?: string;\n  /**\n   * The image of the tooltip\n   */\n  image?: string;\n  /**\n   * The icon of the tooltip next to the title\n   */\n  icon?: SubIcon;\n  /**\n   * Sets the max width of the Tooltip, defaults to 240px\n   */\n  maxWidth?: number;\n  /**\n   * Sets the text direction of the tooltip: \"ltr\", \"rtl\", or \"auto\"\n   */\n  dir?: \"ltr\" | \"rtl\" | \"auto\";\n}\n// When last tooltip was shown in the last 1.5 second - the next tooltip will be shown immediately\nconst IMMEDIATE_SHOW_THRESHOLD_MS = 1500;\n\n// Shared state across multiple tooltip instances (i.e last tooltip shown time)\nconst globalState: { lastTooltipHideTS: number; openTooltipsCount: number } = {\n  lastTooltipHideTS: null,\n  openTooltipsCount: 0\n};\n\nexport default class Tooltip extends PureComponent<TooltipProps> {\n  wasShown: boolean;\n  static positions = TooltipPositionsEnum;\n  static hideShowTriggers = HideShowEventEnum;\n  static themes = TooltipThemeEnum;\n  static animationTypes = AnimationTypeEnum;\n  static defaultProps = {\n    moveBy: { main: 4, secondary: 0 },\n    theme: \"dark\",\n    position: \"top\",\n    hideDelay: 100,\n    showDelay: 300,\n    disableDialogSlide: true,\n    animationType: AnimationTypeEnum.EXPAND,\n    withoutDialog: false,\n    tip: true,\n    hideWhenReferenceHidden: false,\n    modifiers: new Array<Modifier<unknown>>(),\n    showTrigger: Tooltip.hideShowTriggers.MOUSE_ENTER,\n    hideTrigger: Tooltip.hideShowTriggers.MOUSE_LEAVE,\n    showOnDialogEnter: true,\n    referenceWrapperClassName: \"\",\n    addKeyboardHideShowTriggersByDefault: true,\n    open: false\n  };\n  constructor(props: TooltipProps) {\n    super(props);\n    this.renderTooltipContent = this.renderTooltipContent.bind(this);\n    this.getShowDelay = this.getShowDelay.bind(this);\n    this.onTooltipShow = this.onTooltipShow.bind(this);\n    this.onTooltipHide = this.onTooltipHide.bind(this);\n\n    this.wasShown = false;\n  }\n\n  renderTooltipContent() {\n    const { theme, content, className, style, maxWidth, title, image, icon, dir } = this.props;\n    if (!content) {\n      // don't render empty tooltip\n      return null;\n    }\n    let contentValue;\n    if (isFunction(content)) {\n      contentValue = content();\n    } else if (isValidElement(content)) {\n      contentValue = content;\n    } else if (typeof content === \"string\" && content) {\n      contentValue = content;\n    } else if (Array.isArray(content) && content.length > 0) {\n      // allow array of elements\n      contentValue = content;\n    }\n\n    if (!contentValue) {\n      return null;\n    }\n\n    return (\n      <div\n        style={maxWidth ? ({ ...style, \"--tooltip-max-width\": `${maxWidth}px` } as CSSProperties) : style}\n        className={cx(styles.tooltip, getStyle(styles, camelCase(theme)), className)}\n        dir={dir}\n      >\n        {image && <img className={styles.image} src={image} alt=\"\" />}\n        <div className={cx(styles.content)}>\n          {title && (\n            <Flex gap=\"xs\">\n              {icon && <Icon iconSize=\"20\" icon={icon} />}\n              <div className={styles.title}>{title}</div>\n            </Flex>\n          )}\n          {contentValue}\n        </div>\n      </div>\n    );\n  }\n\n  onTooltipShow() {\n    if (!this.wasShown) {\n      const { onTooltipShow } = this.props;\n      globalState.openTooltipsCount++;\n      this.wasShown = true;\n      onTooltipShow && onTooltipShow();\n    }\n  }\n\n  onTooltipHide() {\n    if (this.wasShown) {\n      const { onTooltipHide } = this.props;\n      globalState.lastTooltipHideTS = Date.now();\n      globalState.openTooltipsCount--;\n      this.wasShown = false;\n      onTooltipHide && onTooltipHide();\n    }\n  }\n\n  getTimeSinceLastTooltip() {\n    if (globalState.openTooltipsCount > 0) {\n      return 0;\n    }\n    return globalState.lastTooltipHideTS ? Date.now() - globalState.lastTooltipHideTS : Infinity;\n  }\n\n  getShowDelay() {\n    const { showDelay, immediateShowDelay } = this.props;\n    const timeSinceLastTooltip = this.getTimeSinceLastTooltip();\n    if ((immediateShowDelay === 0 || immediateShowDelay) && timeSinceLastTooltip < IMMEDIATE_SHOW_THRESHOLD_MS) {\n      // showing the tooltip immediately (without animation)\n      return {\n        showDelay: immediateShowDelay,\n        preventAnimation: true\n      };\n    }\n    return {\n      showDelay,\n      preventAnimation: false\n    };\n  }\n\n  render() {\n    const {\n      withoutDialog,\n      children,\n      forceRenderWithoutChildren,\n      theme,\n      tip,\n      arrowClassName,\n      id,\n      \"data-testid\": dataTestId,\n      position\n    } = this.props;\n\n    if (!children && !forceRenderWithoutChildren) {\n      return null;\n    }\n\n    if (withoutDialog) {\n      return this.renderTooltipContent();\n    }\n\n    const content = this.renderTooltipContent;\n    const dialogProps = {\n      ...this.props,\n      position: position,\n      \"data-testid\": dataTestId || getTestId(ComponentDefaultTestId.TOOLTIP, id),\n      tooltip: tip,\n      content,\n      tooltipClassName: cx(styles.arrow, getStyle(styles, theme), arrowClassName),\n      onDialogDidHide: this.onTooltipHide,\n      onDialogDidShow: this.onTooltipShow,\n      getDynamicShowDelay: this.getShowDelay\n    };\n    return (\n      <Dialog {...dialogProps} animationType=\"expand\">\n        {children}\n      </Dialog>\n    );\n  }\n}\n"],"names":["globalState","lastTooltipHideTS","openTooltipsCount","Tooltip","_PureComponent","props","_this","_classCallCheck","_callSuper","renderTooltipContent","bind","getShowDelay","onTooltipShow","onTooltipHide","wasShown","_inherits","PureComponent","_createClass","key","value","contentValue","_this$props","this","theme","content","className","style","maxWidth","title","image","icon","dir","isFunction","isValidElement","Array","isArray","length","React","Object","assign","concat","cx","styles","tooltip","getStyle","camelCase","createElement","src","alt","Flex","gap","Icon","iconSize","Date","now","Infinity","_this$props2","showDelay","immediateShowDelay","timeSinceLastTooltip","getTimeSinceLastTooltip","preventAnimation","_this$props3","children","tip","arrowClassName","id","dataTestId","position","forceRenderWithoutChildren","withoutDialog","dialogProps","getTestId","ComponentDefaultTestId","TOOLTIP","tooltipClassName","arrow","onDialogDidHide","onDialogDidShow","getDynamicShowDelay","Dialog","animationType","positions","TooltipPositionsEnum","hideShowTriggers","HideShowEventEnum","themes","TooltipThemeEnum","animationTypes","AnimationTypeEnum","defaultProps","moveBy","main","secondary","hideDelay","disableDialogSlide","EXPAND","hideWhenReferenceHidden","modifiers","showTrigger","MOUSE_ENTER","hideTrigger","MOUSE_LEAVE","showOnDialogEnter","referenceWrapperClassName","addKeyboardHideShowTriggersByDefault","open"],"mappings":"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"}