{"version":3,"file":"Avatar.js","sources":["../../../../../src/components/Avatar/Avatar.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { AriaRole, useCallback, useMemo } from \"react\";\nimport { isNil } from \"lodash-es\";\nimport { ElementAllowedColor as ElementAllowedColorEnum } from \"../../utils/colors-vars-map\";\nimport { ElementAllowedColor, getElementColor } from \"../../types/Colors\";\nimport { AvatarSize as AvatarSizeEnum, AvatarType as AvatarTypeEnum } from \"./AvatarConstants\";\nimport { AvatarSize, AvatarType } from \"./Avatar.types\";\nimport { AvatarBadge, AvatarBadgeProps } from \"./AvatarBadge\";\nimport { AvatarContent } from \"./AvatarContent\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport ClickableWrapper from \"../Clickable/ClickableWrapper\";\nimport { SubIcon, VibeComponentProps, withStaticProps } from \"../../types\";\nimport styles from \"./Avatar.module.scss\";\n\nexport interface AvatarProps extends VibeComponentProps {\n  src?: string;\n  text?: string;\n  tooltipProps?: Partial<TooltipProps>;\n  ariaLabel?: string;\n  withoutTooltip?: boolean;\n  icon?: SubIcon;\n  type?: AvatarType;\n  /** Class name for the avatar content of text type */\n  textClassName?: string;\n  /** Class name for a div-wrapper of avatar content */\n  avatarContentWrapperClassName?: string;\n  backgroundColor?: ElementAllowedColor;\n  customBackgroundColor?: string;\n  role?: AriaRole;\n  size?: AvatarSize;\n  customSize?: number;\n  tabIndex?: number;\n  ariaHidden?: boolean;\n  disabled?: boolean;\n  square?: boolean;\n  topLeftBadgeProps?: AvatarBadgeProps;\n  topRightBadgeProps?: AvatarBadgeProps;\n  bottomLeftBadgeProps?: AvatarBadgeProps;\n  bottomRightBadgeProps?: AvatarBadgeProps;\n  withoutBorder?: boolean;\n  onClick?: (event: React.MouseEvent | React.KeyboardEvent, avatarId: string) => void;\n}\n\nconst Avatar: React.FC<AvatarProps> & {\n  types?: typeof AvatarTypeEnum;\n  sizes?: typeof AvatarSizeEnum;\n  colors?: typeof ElementAllowedColorEnum;\n  backgroundColors?: typeof ElementAllowedColorEnum;\n} = ({\n  id,\n  type = \"text\",\n  className,\n  avatarContentWrapperClassName,\n  textClassName = \"\",\n  size = \"large\",\n  src,\n  icon,\n  text,\n  tooltipProps,\n  ariaLabel,\n  withoutTooltip = false,\n  role,\n  backgroundColor = \"chili-blue\",\n  square,\n  disabled,\n  tabIndex,\n  ariaHidden = false,\n  topLeftBadgeProps,\n  topRightBadgeProps,\n  bottomLeftBadgeProps,\n  bottomRightBadgeProps,\n  withoutBorder = false,\n  customSize = null,\n  customBackgroundColor = null,\n  onClick,\n  \"data-testid\": dataTestId\n}: AvatarProps) => {\n  const backgroundColorStyle = useMemo(() => {\n    if (customBackgroundColor) return { backgroundColor: customBackgroundColor };\n    return src ? {} : { backgroundColor: getElementColor(backgroundColor) };\n  }, [src, backgroundColor, customBackgroundColor]);\n  const sizeStyle = useMemo(() => {\n    return customSize ? { height: customSize, width: customSize } : {};\n  }, [customSize]);\n\n  const overrideTooltipProps = useMemo(() => {\n    if (withoutTooltip) return undefined;\n\n    if (tooltipProps) {\n      return { content: ariaLabel, ...tooltipProps };\n    } else {\n      return { content: ariaLabel };\n    }\n  }, [ariaLabel, tooltipProps, withoutTooltip]);\n\n  const badgesContainer = useMemo(() => {\n    const badges = [];\n    if (!isNil(topLeftBadgeProps)) {\n      badges.push(\n        <div key=\"top-left-badge\" className={cx(styles.badge, styles.badgeTopLeft)}>\n          <AvatarBadge size={size} {...topLeftBadgeProps} />\n        </div>\n      );\n    }\n    if (!isNil(topRightBadgeProps)) {\n      badges.push(\n        <div key=\"top-right-badge\" className={cx(styles.badge, styles.badgeTopRight)}>\n          <AvatarBadge size={size} {...topRightBadgeProps} />\n        </div>\n      );\n    }\n    if (!isNil(bottomLeftBadgeProps)) {\n      badges.push(\n        <div key=\"bottom-left-badge\" className={cx(styles.badge, styles.badgeBottomLeft)}>\n          <AvatarBadge size={size} {...bottomLeftBadgeProps} />\n        </div>\n      );\n    }\n    if (!isNil(bottomRightBadgeProps)) {\n      badges.push(\n        <div key=\"bottom-right-bade\" className={cx(styles.badge, styles.badgeBottomRight)}>\n          <AvatarBadge size={size} {...bottomRightBadgeProps} />\n        </div>\n      );\n    }\n\n    return badges.length > 0 ? <div className={cx(styles.badges)}>{badges}</div> : null;\n  }, [size, topLeftBadgeProps, topRightBadgeProps, bottomLeftBadgeProps, bottomRightBadgeProps]);\n\n  const defaultTabIndex = useMemo(() => {\n    if (!disabled && (onClick || overrideTooltipProps?.content)) {\n      return 0;\n    }\n    return -1;\n  }, [disabled, onClick, overrideTooltipProps?.content]);\n\n  const overrideTabIndex = tabIndex ?? defaultTabIndex;\n\n  const clickHandler = useCallback(\n    (event: React.MouseEvent | React.KeyboardEvent) => {\n      event.preventDefault();\n      if (onClick) {\n        onClick(event, id);\n      }\n    },\n    [onClick, id]\n  );\n\n  return (\n    <div\n      id={id}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.AVATAR, id)}\n      className={cx(styles.avatar, styles[size], className)}\n      style={sizeStyle}\n    >\n      <ClickableWrapper\n        isClickable={!!onClick}\n        clickableProps={{\n          onClick: clickHandler,\n          tabIndex: \"-1\",\n          className: styles.clickableWrapper\n        }}\n      >\n        <Tooltip showTrigger={[\"focus\", \"mouseenter\"]} hideTrigger={[\"blur\", \"mouseleave\"]} {...overrideTooltipProps}>\n          <div\n            className={cx(\n              styles.circle,\n              getStyle(styles, camelCase(\"circle--\" + type)),\n              {\n                [styles.disabled]: disabled,\n                [styles.square]: square,\n                [styles.withoutBorder]: withoutBorder\n              },\n              avatarContentWrapperClassName\n            )}\n            aria-hidden={ariaHidden}\n            tabIndex={overrideTabIndex}\n            style={{ ...backgroundColorStyle }}\n          >\n            <AvatarContent\n              type={type}\n              size={size}\n              src={src}\n              icon={icon}\n              text={text}\n              ariaLabel={ariaLabel}\n              role={role}\n              textClassName={textClassName}\n            />\n          </div>\n          {badgesContainer}\n        </Tooltip>\n      </ClickableWrapper>\n    </div>\n  );\n};\n\nexport default withStaticProps(Avatar, {\n  types: AvatarTypeEnum,\n  sizes: AvatarSizeEnum,\n  colors: ElementAllowedColorEnum,\n  backgroundColors: ElementAllowedColorEnum\n});\n"],"names":["withStaticProps","_ref","id","_ref$type","type","className","avatarContentWrapperClassName","_ref$textClassName","textClassName","_ref$size","size","src","icon","text","tooltipProps","ariaLabel","_ref$withoutTooltip","withoutTooltip","role","_ref$backgroundColor","backgroundColor","square","disabled","tabIndex","_ref$ariaHidden","ariaHidden","topLeftBadgeProps","topRightBadgeProps","bottomLeftBadgeProps","bottomRightBadgeProps","_ref$withoutBorder","withoutBorder","_ref$customSize","customSize","_ref$customBackground","customBackgroundColor","onClick","dataTestId","backgroundColorStyle","useMemo","getElementColor","sizeStyle","height","width","overrideTooltipProps","Object","assign","content","badgesContainer","badges","isNil","push","React","key","cx","styles","badge","badgeTopLeft","createElement","AvatarBadge","badgeTopRight","badgeBottomLeft","badgeBottomRight","length","defaultTabIndex","overrideTabIndex","clickHandler","useCallback","event","preventDefault","getTestId","ComponentDefaultTestId","AVATAR","avatar","style","ClickableWrapper","isClickable","clickableProps","clickableWrapper","Tooltip","showTrigger","hideTrigger","circle","getStyle","camelCase","_defineProperty","AvatarContent","types","AvatarTypeEnum","sizes","AvatarSizeEnum","colors","ElementAllowedColorEnum","backgroundColors"],"mappings":"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"}