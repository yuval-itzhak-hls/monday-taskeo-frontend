{"version":3,"file":"LegacyModal.js","sources":["../../../../../src/components/LegacyModal/LegacyModal.tsx"],"sourcesContent":["import React, { cloneElement, FC, ReactElement, useCallback, useMemo } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport cx from \"classnames\";\nimport { useA11yDialog } from \"./a11yDialog\";\nimport ModalContent from \"./LegacyModalContent/LegacyModalContent\";\nimport ModalHeader from \"./LegacyModalHeader/LegacyModalHeader\";\nimport useBodyScrollLock from \"./useBodyScrollLock\";\nimport useShowHideModal from \"./useShowHideModal\";\nimport {\n  isModalContent,\n  isModalFooter,\n  isModalHeader,\n  ModalWidth as ModalWidthEnum,\n  validateTitleProp\n} from \"./ModalHelper\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { withStaticProps } from \"../../types\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport styles from \"./LegacyModal.module.scss\";\nimport { ModalWidth } from \"./LegacyModal.types\";\nimport LayerProvider from \"../LayerProvider/LayerProvider\";\nimport { isClient } from \"../../utils/ssr-utils\";\n\nexport interface LegacyModalProps {\n  /**\n   * Id of the modal, used internally and for accessibility\n   */\n  id?: string;\n  \"data-testid\"?: string;\n  /**\n   * Show/hide the Dialog\n   */\n  show: boolean;\n  /**\n   * Heading for the modal, mandatory when ModalHeader isn't provided in children\n   */\n  title?: string;\n  /**\n   * Description for the modal title\n   */\n  description?: string;\n  /**\n   * Called when the modal is closed (by close button/click outside/esc key)\n   */\n  onClose: () => void;\n  /**\n   *  Makes the dialog behave like a modal (preventing closing on click outside of\n   *  ESC key)..\n   */\n  alertDialog?: boolean;\n  /**\n   *  Used for the fromOrigin animation\n   */\n  triggerElement?: Element;\n  /**\n   *  Set the modal's width. Can be one of the presets or any custom size\n   */\n  width?: ModalWidth | string;\n  /**\n   *  Aria label for the close button\n   */\n  closeButtonAriaLabel?: string;\n  /**\n   *  Add gaps between parts of the modal\n   */\n  contentSpacing?: boolean;\n  /**\n   *  classNames for specific parts of the dialog\n   */\n  classNames?: {\n    container?: string;\n    overlay?: string;\n    modal?: string;\n  };\n  /**\n   *  Dialog content\n   */\n  children?: ReactElement | ReactElement[];\n  /**\n   * z-index attribute of the container\n   */\n  zIndex?: number;\n  /**\n   * When `false`, the modal will remain in the DOM when closed\n   */\n  unmountOnClose?: boolean;\n}\n\nconst Modal: FC<LegacyModalProps> & { width?: typeof ModalWidthEnum } = ({\n  classNames = { container: \"\", overlay: \"\", modal: \"\" },\n  id,\n  show,\n  title = \"\",\n  description = \"\",\n  onClose = NOOP,\n  alertDialog = false,\n  children,\n  triggerElement,\n  width = \"default\",\n  closeButtonAriaLabel = \"Close\",\n  contentSpacing = false,\n  zIndex = 10000,\n  unmountOnClose = true,\n  \"data-testid\": dataTestId\n}: LegacyModalProps) => {\n  const childrenArray: ReactElement[] = useMemo(\n    () => (children ? (React.Children.toArray(children) as ReactElement[]) : []),\n    [children]\n  );\n  validateTitleProp(title, childrenArray);\n\n  const [instance, attr] = useA11yDialog({\n    id,\n    alertDialog\n  });\n\n  const closeIfNotAlertType = useCallback(() => {\n    if (!alertDialog) {\n      onClose?.();\n    }\n  }, [alertDialog, onClose]);\n\n  // lock body scroll when modal is open\n  useBodyScrollLock({ instance });\n\n  // show/hide and animate the modal\n  const { shouldShow } = useShowHideModal({\n    instance,\n    show,\n    triggerElement,\n    onClose,\n    alertDialog\n  });\n\n  const header = useMemo(() => {\n    const { id } = attr.title;\n    const header = childrenArray.find(isModalHeader);\n    if (header) {\n      return cloneElement(header, { id, closeModal: onClose });\n    }\n    return (\n      <ModalHeader\n        title={title}\n        description={description}\n        closeModal={onClose}\n        id={id}\n        closeButtonAriaLabel={closeButtonAriaLabel}\n      />\n    );\n  }, [attr.title, childrenArray, title, description, onClose, closeButtonAriaLabel]);\n\n  const content = useMemo(() => {\n    return (\n      childrenArray.find(isModalContent) || (\n        <ModalContent>{childrenArray.filter(child => !isModalHeader(child) && !isModalFooter(child))}</ModalContent>\n      )\n    );\n  }, [childrenArray]);\n\n  const footer = useMemo(() => {\n    return childrenArray.find(isModalFooter) || null;\n  }, [childrenArray]);\n\n  const customWidth = width !== \"default\" && width !== \"full-width\";\n\n  const dialog = (\n    <LayerProvider layerRef={{ current: instance?.$el }}>\n      <div\n        {...attr.container}\n        className={cx(styles.container, classNames.container)}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.MODAL, id)}\n        style={{ \"--monday-modal-z-index\": zIndex }}\n      >\n        {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events */}\n        <div\n          onClick={closeIfNotAlertType}\n          className={cx(styles.overlay, classNames.overlay)}\n          data-testid={ComponentDefaultTestId.MODAL_OVERLAY}\n        />\n        <div\n          {...attr.dialog}\n          className={cx(styles.dialog, classNames.modal, {\n            [styles.default]: width === \"default\",\n            [styles.full]: width === \"full-width\",\n            [styles.spacing]: contentSpacing\n          })}\n          style={{ width: customWidth ? width : null }}\n        >\n          {header}\n          {content}\n          {footer}\n        </div>\n      </div>\n    </LayerProvider>\n  );\n\n  if (unmountOnClose && !shouldShow) {\n    return null;\n  }\n  return isClient() ? ReactDOM.createPortal(dialog, document.body) : null;\n};\n\nexport default withStaticProps(Modal, {\n  width: ModalWidthEnum\n});\n"],"names":["withStaticProps","_ref","_ref$classNames","classNames","container","overlay","modal","id","show","_ref$title","title","_ref$description","description","_ref$onClose","onClose","NOOP","_ref$alertDialog","alertDialog","children","triggerElement","_ref$width","width","_ref$closeButtonAriaL","closeButtonAriaLabel","_ref$contentSpacing","contentSpacing","_ref$zIndex","zIndex","_ref$unmountOnClose","unmountOnClose","dataTestId","childrenArray","useMemo","React","Children","toArray","validateTitleProp","_useA11yDialog","useA11yDialog","_useA11yDialog2","_slicedToArray","instance","attr","closeIfNotAlertType","useCallback","useBodyScrollLock","shouldShow","useShowHideModal","header","find","isModalHeader","cloneElement","closeModal","createElement","ModalHeader","content","isModalContent","ModalContent","filter","child","isModalFooter","footer","customWidth","dialog","LayerProvider","layerRef","current","$el","Object","assign","className","cx","styles","getTestId","ComponentDefaultTestId","MODAL","style","onClick","MODAL_OVERLAY","_defineProperty","default","full","spacing","isClient","ReactDOM","createPortal","document","body","ModalWidthEnum"],"mappings":"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"}