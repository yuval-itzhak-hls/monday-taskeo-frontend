{"version":3,"file":"LegacyModalHeader.js","sources":["../../../../../../src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx"],"sourcesContent":["import React, { FC } from \"react\";\nimport cx from \"classnames\";\nimport IconButton from \"../../IconButton/IconButton\";\nimport { CloseSmall } from \"@vibe/icons\";\nimport Icon from \"../../Icon/Icon\";\nimport VibeComponentProps from \"../../../types/VibeComponentProps\";\nimport { NOOP } from \"../../../utils/function-utils\";\nimport { ElementContent } from \"src/types/ElementContent\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport Text from \"../../Text/Text\";\nimport Heading from \"../../Heading/Heading\";\nimport Flex from \"../../Flex/Flex\";\nimport styles from \"./LegacyModalHeader.module.scss\";\nimport { SubIcon } from \"../../../types/SubIcon\";\n\ninterface BaseLegacyModalHeaderProps extends VibeComponentProps {\n  /**\n   * Description of the modal - pure string description is a recommended standard, use JSX ability only if there is a need to add links\n   */\n  description?: ElementContent;\n  /**\n   * Icon to be rendered before the title\n   */\n  // icon?: string | React.FunctionComponent<IconSubComponentProps> | null;\n  icon?: SubIcon;\n  /**\n   * Class name for the wrapper\n   */\n  className?: string;\n  /**\n   * Class name for the title\n   */\n  titleClassName?: string;\n  /**\n   * closes the Modal. No need to provide it, it is being provided by the modal\n   */\n  closeModal?: () => void;\n  /**  /**\n   * ID for the title, needed for accessibility. No need to provide it, it is being provided by the modal\n   */\n  id?: string;\n  /**\n   * Class name for the description\n   */\n  descriptionClassName?: string;\n  /**\n   * Size of the icon\n   */\n  iconSize?: number;\n  /**\n   * class name for the icon\n   */\n  iconClassName?: string;\n  /**\n   * Aria label for the close button\n   */\n  closeButtonAriaLabel?: string;\n}\n\ninterface LegacyModalHeaderWithOnlyTitle extends BaseLegacyModalHeaderProps {\n  title: ElementContent;\n  children?: never;\n}\n\ninterface LegacyModalHeaderWithOnlyChildren extends BaseLegacyModalHeaderProps {\n  title?: never;\n  children: ElementContent;\n}\n\nexport type LegacyModalHeaderProps = LegacyModalHeaderWithOnlyTitle | LegacyModalHeaderWithOnlyChildren;\n\nconst LegacyModalHeader: FC<LegacyModalHeaderProps> = ({\n  className,\n  title,\n  children,\n  titleClassName,\n  description = \"\",\n  descriptionClassName,\n  icon,\n  closeModal = NOOP,\n  iconSize = 24,\n  iconClassName,\n  closeButtonAriaLabel = \"close\",\n  id,\n  \"data-testid\": dataTestId\n}) => {\n  return (\n    <div\n      className={cx(styles.container, className)}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.MODAL_HEADER, id)}\n    >\n      {children ? (\n        children\n      ) : (\n        <Flex align=\"start\" gap=\"small\" className={titleClassName}>\n          {icon && (\n            <Icon\n              className={cx(styles.icon, iconClassName)}\n              icon={icon}\n              iconType=\"svg\"\n              iconSize={iconSize}\n              ignoreFocusStyle\n            />\n          )}\n          <Heading id={id} maxLines={2}>\n            {title}\n          </Heading>\n        </Flex>\n      )}\n      {description && (\n        <Text type=\"text2\" maxLines={2} className={cx(styles.description, descriptionClassName)}>\n          {description}\n        </Text>\n      )}\n\n      <div className={cx(styles.closeButton)}>\n        <IconButton\n          key=\"xxs\"\n          onClick={closeModal}\n          ariaLabel={closeButtonAriaLabel}\n          icon={CloseSmall}\n          kind=\"tertiary\"\n          size=\"small\"\n        />\n      </div>\n    </div>\n  );\n};\n\nObject.assign(LegacyModalHeader, {\n  displayName: \"ModalHeader\"\n});\n\nexport default LegacyModalHeader;\n"],"names":["LegacyModalHeader","_ref","title","children","titleClassName","_ref$description","description","descriptionClassName","icon","_ref$closeModal","closeModal","NOOP","_ref$iconSize","iconSize","iconClassName","_ref$closeButtonAriaL","closeButtonAriaLabel","id","dataTestId","React","className","cx","styles","container","getTestId","ComponentDefaultTestId","MODAL_HEADER","createElement","Flex","align","gap","Icon","iconType","ignoreFocusStyle","Heading","maxLines","Text","type","closeButton","IconButton","key","onClick","ariaLabel","CloseSmall","kind","size","Object","assign","displayName"],"mappings":"0gBAwEA,IAAMA,EAAgD,SAA/BC,GAclB,IAZHC,EAAKD,EAALC,MACAC,EAAQF,EAARE,SACAC,EAAcH,EAAdG,eAAcC,EAAAJ,EACdK,YAAAA,OAAc,IAAHD,EAAG,GAAEA,EAChBE,EAAoBN,EAApBM,qBACAC,EAAIP,EAAJO,KAAIC,EAAAR,EACJS,WAAAA,OAAaC,IAAHF,EAAGE,EAAIF,EAAAG,EAAAX,EACjBY,SAAAA,OAAW,IAAHD,EAAG,GAAEA,EACbE,EAAab,EAAba,cAAaC,EAAAd,EACbe,qBAAAA,OAAuB,IAAHD,EAAG,QAAOA,EAC9BE,EAAEhB,EAAFgB,GACeC,EAAUjB,EAAzB,eAEA,OACEkB,uBACEC,UAAWC,EAAGC,EAAOC,UAhBhBtB,EAATmB,WAiBiB,cAAAF,GAAcM,EAAUC,EAAuBC,aAAcT,IAEzEd,GAGCgB,EAAAQ,cAACC,EAAK,CAAAC,MAAM,QAAQC,IAAI,QAAQV,UAAWhB,GACxCI,GACCW,EAACQ,cAAAI,EACC,CAAAX,UAAWC,EAAGC,EAAOd,KAAMM,GAC3BN,KAAMA,EACNwB,SAAS,MACTnB,SAAUA,EACVoB,sBAGJd,EAAAQ,cAACO,EAAO,CAACjB,GAAIA,EAAIkB,SAAU,GACxBjC,IAINI,GACCa,EAAAQ,cAACS,EAAI,CAACC,KAAK,QAAQF,SAAU,EAAGf,UAAWC,EAAGC,EAAOhB,YAAaC,IAC/DD,GAILa,EAAAQ,cAAA,MAAA,CAAKP,UAAWC,EAAGC,EAAOgB,cACxBnB,EAAAQ,cAACY,EAAU,CACTC,IAAI,MACJC,QAAS/B,EACTgC,UAAW1B,EACXR,KAAMmC,EACNC,KAAK,WACLC,KAAK,WAKf,EAEAC,OAAOC,OAAO/C,EAAmB,CAC/BgD,YAAa"}