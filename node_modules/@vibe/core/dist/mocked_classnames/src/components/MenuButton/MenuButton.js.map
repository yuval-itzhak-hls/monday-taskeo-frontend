{"version":3,"file":"MenuButton.js","sources":["../../../../../src/components/MenuButton/MenuButton.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useMemo, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport { camelCase } from \"lodash-es\";\nimport { isForwardRef } from \"react-is\";\nimport Dialog, { DialogEvent } from \"../Dialog/Dialog\";\nimport DialogContentContainer from \"../DialogContentContainer/DialogContentContainer\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport useIsomorphicLayoutEffect from \"../../hooks/ssr/useIsomorphicLayoutEffect\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { BUTTON_ICON_SIZE } from \"../Button/ButtonConstants\";\nimport { ElementContent, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport {\n  MenuButtonComponentPosition as MenuButtonComponentPositionEnum,\n  MenuButtonSize as MenuButtonSizeEnum\n} from \"./MenuButtonConstants\";\nimport {\n  DialogPosition as DialogPositionEnum,\n  HideShowEvent as DialogTriggerEventEnum,\n  DialogSize as DialogSizeEnum\n} from \"../Dialog/DialogConstants\";\nimport { MenuButtonComponentPosition, MenuButtonSize } from \"./MenuButton.types\";\nimport { DialogOffset, DialogPosition, DialogSize, DialogTriggerEvent } from \"../Dialog/Dialog.types\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { Menu } from \"@vibe/icons\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { MenuChild } from \"../Menu/Menu/MenuConstants\";\nimport styles from \"./MenuButton.module.scss\";\nimport { TooltipPositions } from \"../Tooltip/Tooltip.types\";\n\nconst MOVE_BY = { main: 8, secondary: 0 };\n\nexport interface MenuButtonProps extends VibeComponentProps {\n  /**\n   * Control the button's selected state\n   */\n  active?: boolean;\n  /**\n   *Class name to add to the button when the dialog is open\n   */\n  openDialogComponentClassName?: string;\n  /**\n   * Receives React Component\n   */\n  component?: (() => JSX.Element) | React.ElementType;\n  size?: MenuButtonSize;\n  open?: boolean;\n  onClick?: (event: React.MouseEvent) => void;\n  zIndex?: number;\n  ariaLabel?: string;\n  /*\n    Class name to provide the element which wraps the popover/modal/dialog\n   */\n  dialogClassName?: string;\n  /**\n   * main - `dialogOffset.main` - main axis offset; `dialogOffset.secondary` secondary axis offset\n   */\n  dialogOffset?: DialogOffset;\n  dialogPaddingSize?: DialogSize;\n  dialogPosition?: DialogPosition;\n  dialogShowTriggerIgnoreClass?: string;\n  dialogHideTriggerIgnoreClass?: string;\n  /**\n   * the container selector in which to append the dialog\n   * for examples: \"body\" , \".my-class\", \"#my-id\"\n   */\n  dialogContainerSelector?: string;\n  /**\n   * Dialog Alignment\n   */\n  startingEdge?: string;\n  /*\n    Callback function to be called when the menu is shown\n   */\n  onMenuShow?: () => void;\n  /*\n  Callback function to be called when the menu is hidden\n */\n  onMenuHide?: () => void;\n  /**\n   * Text to be displayed after the icon\n   */\n  text?: string;\n  disabled?: boolean;\n  tooltipContent?: string;\n  /**\n   Remove \"Tab\" key from the hide trigger\n   */\n  removeTabCloseTrigger?: boolean;\n  /**\n   is an array with the content of types:\n   CLICK, CLICK_OUTSIDE, ESCAPE_KEY, TAB_KEY, MOUSE_ENTER, MOUSE_LEAVE,\n   ENTER, MOUSE_DOWN, FOCUS, BLUR, CONTENT_CLICK\n   */\n  tooltipTriggers?: DialogTriggerEvent | DialogTriggerEvent[];\n  /**\n   * the disabled/tooltip position of the menu button - one of the MenuButton.dialogPositions\n   */\n  tooltipPosition?: TooltipPositions;\n  /**\n   * Tooltip Element Wrapper ClassName\n   */\n  tooltipReferenceClassName?: string;\n  tooltipProps?: Partial<TooltipProps>;\n  /**\n   * When the MenuButton is hidden hide the dialog and tooltip as well\n   */\n  hideWhenReferenceHidden?: boolean;\n  children?: ElementContent;\n  /**\n   * Specifies whether to render the component before or after the text\n   */\n  componentPosition?: MenuButtonComponentPosition;\n  /**\n   * Element to be used as the trigger element for the Menu - default is button\n   */\n  triggerElement?: React.ElementType;\n  /**\n   * Close the menu when an item is clicked\n   */\n  closeMenuOnItemClick?: boolean;\n  /**\n   * Whether tooltip should appear only when the trigger element is hovered and not the menu dialog\n   */\n  showTooltipOnlyOnTriggerElement?: boolean;\n  closeDialogOnContentClick?: boolean;\n}\n\nconst MenuButton: VibeComponent<MenuButtonProps> & {\n  sizes?: typeof MenuButtonSizeEnum;\n  paddingSizes?: typeof DialogContentContainer.sizes;\n  dialogPositions?: typeof DialogPositionEnum;\n  hideTriggers?: typeof Dialog.hideShowTriggers;\n  componentPositions?: typeof MenuButtonComponentPositionEnum;\n} = forwardRef(\n  (\n    {\n      id,\n      className,\n      openDialogComponentClassName,\n      children,\n      component = Menu,\n      componentPosition = \"start\",\n      size = \"small\",\n      open = false,\n      onClick = NOOP,\n      zIndex = null,\n      ariaLabel = \"Menu\",\n      closeMenuOnItemClick,\n      dialogOffset = MOVE_BY,\n      dialogPosition = Dialog.positions.BOTTOM_START,\n      dialogClassName,\n      dialogPaddingSize = DialogContentContainer.sizes.SMALL,\n      dialogShowTriggerIgnoreClass,\n      dialogHideTriggerIgnoreClass,\n      onMenuHide = NOOP,\n      onMenuShow = NOOP,\n      disabled = false,\n      text,\n      tooltipContent,\n      tooltipProps,\n      tooltipTriggers = [MenuButton.hideTriggers.MOUSE_LEAVE],\n      tooltipPosition = \"right\",\n      startingEdge = \"bottom\",\n      removeTabCloseTrigger = false,\n      tooltipReferenceClassName,\n      hideWhenReferenceHidden = true,\n      dialogContainerSelector,\n      active,\n      triggerElement: TriggerElement = \"button\",\n      showTooltipOnlyOnTriggerElement,\n      \"data-testid\": dataTestId,\n      closeDialogOnContentClick = false\n    }: MenuButtonProps,\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const [isOpen, setIsOpen] = useState(open);\n    const isActive = active ?? isOpen;\n\n    const handleMenuClose = useCallback(\n      (focusOnMenuButtonAfterClose: boolean) => {\n        onMenuHide();\n        setIsOpen(false);\n        const button = componentRef.current;\n        if (!button || !focusOnMenuButtonAfterClose) {\n          return;\n        }\n        window.requestAnimationFrame(() => {\n          button.focus();\n        });\n      },\n      [onMenuHide]\n    );\n\n    const onMenuDidClose = useCallback(\n      (event: React.KeyboardEvent) => {\n        // TODO: check the functionality of the isEscapeKey since the event is not an actual KeyboardEVent but an object with propagate property only\n        const isEscapeKey = event?.key === \"Escape\";\n        if (isEscapeKey || closeMenuOnItemClick) {\n          // @ts-ignore\n          if (event.propagate) {\n            handleMenuClose(isEscapeKey);\n          }\n        }\n      },\n      [closeMenuOnItemClick, handleMenuClose]\n    );\n\n    const onDialogDidHide = useCallback(\n      (event: DialogEvent, hideEvent: string) => {\n        handleMenuClose(hideEvent === Dialog.hideShowTriggers.ESCAPE_KEY);\n      },\n      [handleMenuClose]\n    );\n\n    const onDialogDidShow = useCallback(() => {\n      setIsOpen(true);\n      onMenuShow();\n    }, [setIsOpen, onMenuShow]);\n\n    const [clonedChildren, hideTrigger] = useMemo(() => {\n      const triggers = new Set([\n        Dialog.hideShowTriggers.CLICK_OUTSIDE,\n        Dialog.hideShowTriggers.TAB_KEY,\n        Dialog.hideShowTriggers.ESCAPE_KEY\n      ]);\n\n      if (closeDialogOnContentClick) {\n        triggers.add(Dialog.hideShowTriggers.CONTENT_CLICK);\n        triggers.add(Dialog.hideShowTriggers.ENTER);\n      }\n\n      if (removeTabCloseTrigger) {\n        triggers.delete(Dialog.hideShowTriggers.TAB_KEY);\n      }\n      const childrenArr = React.Children.toArray(children) as MenuChild[];\n      const cloned = childrenArr.map(child => {\n        if (!React.isValidElement(child)) return null;\n\n        const newProps: { focusOnMount?: boolean; onClose?: (event: React.KeyboardEvent) => void } = {};\n        if (child.type && child.type.supportFocusOnMount) {\n          newProps.focusOnMount = true;\n          triggers.delete(Dialog.hideShowTriggers.ESCAPE_KEY);\n        }\n\n        if (child.type && child.type.isMenu) {\n          newProps.onClose = onMenuDidClose;\n        }\n\n        return React.cloneElement(child, newProps);\n      });\n      return [cloned, Array.from(triggers)];\n    }, [children, onMenuDidClose, closeDialogOnContentClick, removeTabCloseTrigger]);\n\n    const content = useMemo(() => {\n      if (clonedChildren.length === 0) return null;\n      return (\n        <DialogContentContainer size={dialogPaddingSize} type={DialogContentContainer.types.POPOVER}>\n          {clonedChildren}\n        </DialogContentContainer>\n      );\n    }, [clonedChildren, dialogPaddingSize]);\n\n    const computedDialogOffset = useMemo(\n      () => ({\n        ...MOVE_BY,\n        ...dialogOffset\n      }),\n      [dialogOffset]\n    );\n\n    const onMouseUp = (event: React.MouseEvent<HTMLElement>) => {\n      if (disabled) {\n        event.currentTarget.blur();\n        return;\n      }\n      onClick(event);\n    };\n\n    const Icon = component;\n    const iconSize = useMemo(() => {\n      switch (size) {\n        case \"xxs\":\n        case \"xs\":\n          return 16;\n        case \"small\":\n        case \"medium\":\n        case \"large\":\n          return BUTTON_ICON_SIZE;\n        default:\n          return 24;\n      }\n    }, [size]);\n    const icon = Icon ? <Icon size={iconSize.toString()} role=\"img\" aria-hidden=\"true\" /> : null;\n\n    useIsomorphicLayoutEffect(() => {\n      setIsOpen(open);\n    }, [open, setIsOpen]);\n\n    // Trigger element props, which are only relevant for \"button\" element, but might be needed for other elements e.g. Button\n    const triggerElementProps =\n      TriggerElement === \"button\"\n        ? {\n            ref: mergedRef\n          }\n        : {\n            active: isActive,\n            disabled: disabled,\n            ref: isForwardRef(TriggerElement) ? mergedRef : undefined\n          };\n\n    const triggerElementNode = (\n      <TriggerElement\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.MENU_BUTTON, id)}\n        type=\"button\"\n        className={cx(styles.wrapper, className, getStyle(styles, camelCase(`size-${size}`)), {\n          [styles.active]: isActive,\n          [getStyle(styles, openDialogComponentClassName)]: isOpen && openDialogComponentClassName,\n          [styles.disabled]: disabled,\n          [styles.text]: text\n        })}\n        aria-haspopup=\"true\"\n        aria-expanded={isOpen}\n        aria-label={!text && ariaLabel}\n        onMouseUp={onMouseUp}\n        aria-disabled={disabled}\n        {...triggerElementProps}\n      >\n        {componentPosition === \"start\" && icon}\n        {text && <span className={styles.innerText}>{text}</span>}\n        {componentPosition === \"end\" && icon}\n      </TriggerElement>\n    );\n\n    const dialogNode = (dialogChildren: React.ReactElement) => (\n      <Dialog\n        wrapperClassName={dialogClassName}\n        position={dialogPosition}\n        containerSelector={dialogContainerSelector}\n        startingEdge={startingEdge}\n        animationType=\"expand\"\n        content={content}\n        moveBy={computedDialogOffset}\n        showTrigger={disabled ? [] : [\"click\", \"enter\"]}\n        hideTrigger={hideTrigger}\n        showTriggerIgnoreClass={dialogShowTriggerIgnoreClass}\n        hideTriggerIgnoreClass={dialogHideTriggerIgnoreClass}\n        useDerivedStateFromProps={true}\n        onDialogDidShow={onDialogDidShow}\n        onDialogDidHide={onDialogDidHide}\n        zIndex={zIndex}\n        isOpen={isOpen}\n        hideWhenReferenceHidden={hideWhenReferenceHidden}\n      >\n        {dialogChildren}\n      </Dialog>\n    );\n\n    const tooltipNode = (tooltipChildren: React.ReactElement) => (\n      <Tooltip\n        content={tooltipContent}\n        position={tooltipPosition}\n        showTrigger=\"mouseenter\"\n        hideTrigger={tooltipTriggers}\n        referenceWrapperClassName={tooltipReferenceClassName}\n        hideWhenReferenceHidden={hideWhenReferenceHidden}\n        {...tooltipProps}\n      >\n        {tooltipChildren}\n      </Tooltip>\n    );\n\n    if (showTooltipOnlyOnTriggerElement) {\n      return dialogNode(tooltipNode(triggerElementNode));\n    }\n    return tooltipNode(dialogNode(triggerElementNode));\n  }\n);\n\nexport default withStaticProps(MenuButton, {\n  sizes: MenuButtonSizeEnum,\n  paddingSizes: DialogSizeEnum,\n  dialogPositions: DialogPositionEnum,\n  hideTriggers: DialogTriggerEventEnum,\n  componentPositions: MenuButtonComponentPositionEnum\n});\n"],"names":["MOVE_BY","main","secondary","MenuButton","forwardRef","_ref","ref","id","className","openDialogComponentClassName","children","_ref$component","component","Menu","_ref$componentPositio","componentPosition","_ref$size","size","_ref$open","open","_ref$onClick","onClick","NOOP","_ref$zIndex","zIndex","_ref$ariaLabel","ariaLabel","closeMenuOnItemClick","_ref$dialogOffset","dialogOffset","_ref$dialogPosition","dialogPosition","Dialog","positions","BOTTOM_START","dialogClassName","_ref$dialogPaddingSiz","dialogPaddingSize","DialogContentContainer","sizes","SMALL","dialogShowTriggerIgnoreClass","dialogHideTriggerIgnoreClass","_ref$onMenuHide","onMenuHide","_ref$onMenuShow","onMenuShow","_ref$disabled","disabled","text","tooltipContent","tooltipProps","_ref$tooltipTriggers","tooltipTriggers","hideTriggers","MOUSE_LEAVE","_ref$tooltipPosition","tooltipPosition","_ref$startingEdge","startingEdge","_ref$removeTabCloseTr","removeTabCloseTrigger","tooltipReferenceClassName","_ref$hideWhenReferenc","hideWhenReferenceHidden","dialogContainerSelector","active","_ref$triggerElement","triggerElement","TriggerElement","showTooltipOnlyOnTriggerElement","dataTestId","_ref$closeDialogOnCon","closeDialogOnContentClick","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","isActive","handleMenuClose","useCallback","focusOnMenuButtonAfterClose","button","current","window","requestAnimationFrame","focus","onMenuDidClose","event","isEscapeKey","key","propagate","onDialogDidHide","hideEvent","hideShowTriggers","ESCAPE_KEY","onDialogDidShow","_useMemo","useMemo","triggers","Set","CLICK_OUTSIDE","TAB_KEY","add","CONTENT_CLICK","ENTER","delete","React","Children","toArray","map","child","isValidElement","newProps","type","supportFocusOnMount","focusOnMount","isMenu","onClose","cloneElement","Array","from","_useMemo2","clonedChildren","hideTrigger","content","length","createElement","types","POPOVER","computedDialogOffset","Object","assign","Icon","iconSize","BUTTON_ICON_SIZE","icon","role","useIsomorphicLayoutEffect","triggerElementProps","isForwardRef","undefined","triggerElementNode","getTestId","ComponentDefaultTestId","MENU_BUTTON","cx","styles","wrapper","getStyle","camelCase","concat","_defineProperty","onMouseUp","currentTarget","blur","innerText","dialogNode","dialogChildren","wrapperClassName","position","containerSelector","animationType","moveBy","showTrigger","showTriggerIgnoreClass","hideTriggerIgnoreClass","useDerivedStateFromProps","tooltipNode","tooltipChildren","Tooltip","referenceWrapperClassName","withStaticProps","MenuButtonSizeEnum","paddingSizes","DialogSizeEnum","dialogPositions","DialogPositionEnum","DialogTriggerEventEnum","componentPositions","MenuButtonComponentPositionEnum"],"mappings":"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"}