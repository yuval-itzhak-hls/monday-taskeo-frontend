{"version":3,"file":"TableContext.js","sources":["../../../../../../../src/components/Table/context/TableContext/TableContext.tsx"],"sourcesContent":["import React, { createContext, UIEventHandler, useCallback, useContext, useMemo, useRef } from \"react\";\nimport { TableContext as ITableContext, TableProviderProps } from \"./TableContext.types\";\n\nconst TableContext = createContext<ITableContext | undefined>(undefined);\n\nexport const TableProvider = ({ value, children }: TableProviderProps) => {\n  const { setIsScrolled } = value;\n  const headRef = useRef<HTMLDivElement>(null);\n  const virtualizedListRef = useRef<HTMLDivElement>(null);\n  const lastScrollLeft = useRef<number>(0);\n\n  const syncScroll = useCallback(\n    (newScrollLeft: number, source: \"head\" | \"body\") => {\n      if (newScrollLeft === lastScrollLeft.current) return;\n\n      if (source === \"body\" && headRef.current) {\n        headRef.current.scrollLeft = newScrollLeft;\n      }\n      if (source === \"head\" && virtualizedListRef.current) {\n        virtualizedListRef.current.scrollLeft = newScrollLeft;\n      }\n\n      const hasScroll = newScrollLeft > 0;\n      setIsScrolled(prevScroll => (prevScroll !== hasScroll ? hasScroll : prevScroll));\n\n      lastScrollLeft.current = newScrollLeft;\n    },\n    [setIsScrolled]\n  );\n\n  const onHeadScroll: UIEventHandler<HTMLDivElement> = useCallback(\n    e => {\n      const newLeft = (e.target as HTMLDivElement).scrollLeft;\n      syncScroll(newLeft, \"head\");\n    },\n    [syncScroll]\n  );\n\n  const onVirtualizedListScroll = useCallback<UIEventHandler<HTMLDivElement>>(\n    e => {\n      const newLeft = (e.target as HTMLDivElement).scrollLeft;\n      syncScroll(newLeft, \"body\");\n    },\n    [syncScroll]\n  );\n\n  const contextValue = useMemo<ITableContext>(\n    () => ({\n      ...value,\n      headRef,\n      onHeadScroll,\n      virtualizedListRef,\n      onVirtualizedListScroll\n    }),\n    [value, onHeadScroll, onVirtualizedListScroll]\n  );\n\n  return <TableContext.Provider value={contextValue}>{children}</TableContext.Provider>;\n};\n\nexport const useTable = () => {\n  const context = useContext(TableContext);\n  if (context === undefined) {\n    throw new Error(\"useTable must be used within a TableProvider\");\n  }\n  return context;\n};\n"],"names":["TableContext","createContext","undefined","TableProvider","_ref","value","children","setIsScrolled","headRef","useRef","virtualizedListRef","lastScrollLeft","syncScroll","useCallback","newScrollLeft","source","current","scrollLeft","hasScroll","prevScroll","onHeadScroll","e","target","onVirtualizedListScroll","contextValue","useMemo","Object","assign","React","createElement","Provider","useTable","context","useContext","Error"],"mappings":"mGAGA,IAAMA,EAAeC,OAAyCC,GAEjDC,EAAgB,SAAHC,GAA+C,IAAzCC,EAAKD,EAALC,MAAOC,EAAQF,EAARE,SAC7BC,EAAkBF,EAAlBE,cACFC,EAAUC,EAAuB,MACjCC,EAAqBD,EAAuB,MAC5CE,EAAiBF,EAAe,GAEhCG,EAAaC,GACjB,SAACC,EAAuBC,GACtB,GAAID,IAAkBH,EAAeK,QAArC,CAEe,SAAXD,GAAqBP,EAAQQ,UAC/BR,EAAQQ,QAAQC,WAAaH,GAEhB,SAAXC,GAAqBL,EAAmBM,UAC1CN,EAAmBM,QAAQC,WAAaH,GAG1C,IAAMI,EAAYJ,EAAgB,EAClCP,GAAc,SAAAY,GAAU,OAAKA,IAAeD,EAAYA,EAAYC,CAAU,IAE9ER,EAAeK,QAAUF,CAZqB,CAahD,GACA,CAACP,IAGGa,EAA+CP,GACnD,SAAAQ,GAEET,EADiBS,EAAEC,OAA0BL,WACzB,OACtB,GACA,CAACL,IAGGW,EAA0BV,GAC9B,SAAAQ,GAEET,EADiBS,EAAEC,OAA0BL,WACzB,OACtB,GACA,CAACL,IAGGY,EAAeC,GACnB,WAAA,OAAMC,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EACDtB,GAAK,CACRG,QAAAA,EACAY,aAAAA,EACAV,mBAAAA,EACAa,wBAAAA,GACA,GACF,CAAClB,EAAOe,EAAcG,IAGxB,OAAOK,EAAAC,cAAC7B,EAAa8B,SAAQ,CAACzB,MAAOmB,GAAelB,EACtD,EAEayB,EAAW,WACtB,IAAMC,EAAUC,EAAWjC,GAC3B,QAAgBE,IAAZ8B,EACF,MAAUE,MAAM,gDAElB,OAAOF,CACT"}