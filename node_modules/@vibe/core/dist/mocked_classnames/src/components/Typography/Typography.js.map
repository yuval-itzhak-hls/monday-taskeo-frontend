{"version":3,"file":"Typography.js","sources":["../../../../../src/components/Typography/Typography.tsx"],"sourcesContent":["import React, { forwardRef, useRef, HTMLAttributes, useContext } from \"react\";\nimport cx from \"classnames\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport VibeComponent from \"../../types/VibeComponent\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { ElementContent } from \"../../types\";\nimport { TypographyAlign, TypographyColor } from \"./Typography.types\";\nimport { useEllipsisClass, useTooltipProps } from \"./TypographyHooks\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport { TypographyContext } from \"./utils/TypographyContext\";\nimport styles from \"./Typography.module.scss\";\n\nexport interface TypographyProps extends VibeComponentProps, HTMLAttributes<HTMLElement> {\n  /**\n   * The element tag of the text component\n   */\n  element?: string;\n  /**\n   * The textual content\n   */\n  children: ElementContent;\n  color?: TypographyColor;\n  align?: TypographyAlign;\n  /**\n   * When the text is too long, cut the end of the text and display instead of it three dots (...)\n   */\n  ellipsis?: boolean;\n  /**\n   * Use this prop combined with the boolean ellipsis prop for truncate the text and add an ellipsis after a certain number of lines\n   */\n  maxLines?: number;\n  /**\n   * All props are passed to the tooltip displayed when hovering over the text. By default, the tooltip will display when text contains an ellipsis and will show the full text\n   */\n  tooltipProps?: Partial<TooltipProps>;\n  /**\n   * Hide tooltip when hovering the text, by default the tooltip swill display when text contains an ellipsis\n   */\n  withoutTooltip?: boolean;\n}\n\nconst Typography: VibeComponent<TypographyProps, HTMLElement> = forwardRef(\n  (\n    {\n      className,\n      id,\n      children,\n      tooltipProps,\n      \"data-testid\": dataTestId = getTestId(ComponentDefaultTestId.TEXT, id),\n      element = \"span\",\n      color = \"primary\",\n      align = \"start\",\n      ellipsis = true,\n      maxLines = 1,\n      withoutTooltip = false,\n      role,\n      ...htmlAttributes\n    }: TypographyProps,\n    ref\n  ) => {\n    const { overflowTolerance } = useContext(TypographyContext);\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n    const ignoreHeightOverflow = maxLines === 1;\n    const { class: ellipsisClass, style: ellipsisStyle } = useEllipsisClass(ellipsis, maxLines);\n    const overrideTooltipProps = useTooltipProps(\n      componentRef,\n      withoutTooltip,\n      ellipsis,\n      tooltipProps,\n      children,\n      ignoreHeightOverflow,\n      overflowTolerance\n    ) as TooltipProps;\n\n    const overrideAlign = align === \"inherit\" ? \"alignInherit\" : align;\n\n    return (\n      <Tooltip {...overrideTooltipProps}>\n        {React.createElement(\n          element,\n          {\n            id,\n            style: ellipsisStyle,\n            \"data-testid\": dataTestId,\n            className: cx(styles.typography, styles[color], styles[overrideAlign], ellipsisClass, className),\n            ref: mergedRef,\n            role,\n            ...htmlAttributes\n          },\n          children\n        )}\n      </Tooltip>\n    );\n  }\n);\n\nexport default Typography;\n"],"names":["Typography","forwardRef","_a","ref","className","id","children","tooltipProps","_a$dataTestid","dataTestId","getTestId","ComponentDefaultTestId","TEXT","_a$element","element","_a$color","color","_a$align","align","_a$ellipsis","ellipsis","_a$maxLines","maxLines","_a$withoutTooltip","withoutTooltip","role","htmlAttributes","__rest","overflowTolerance","useContext","TypographyContext","componentRef","useRef","mergedRef","useMergeRef","ignoreHeightOverflow","_useEllipsisClass","useEllipsisClass","ellipsisClass","class","ellipsisStyle","style","overrideTooltipProps","useTooltipProps","overrideAlign","React","createElement","Tooltip","Object","assign","cx","styles","typography"],"mappings":"8gBA2CMA,IAAAA,EAA0DC,GAC9D,SACEC,EAeAC,OAdEC,IAAAA,UACAC,IAAAA,GACAC,IAAAA,SACAC,IAAAA,aAAYC,IACZ,eAAeC,OAAaC,IAAHF,EAAGE,EAAUC,EAAuBC,KAAMP,GAAGG,EAAAK,IACtEC,QAAAA,OAAU,IAAHD,EAAG,OAAMA,EAAAE,IAChBC,MAAAA,OAAQ,IAAHD,EAAG,UAASA,EAAAE,IACjBC,MAAAA,OAAQ,IAAHD,EAAG,QAAOA,EAAAE,IACfC,SAAAA,OAAW,IAAHD,GAAOA,EAAAE,IACfC,SAAAA,OAAW,IAAHD,EAAG,EAACA,EAAAE,IACZC,eAAAA,OAAiB,IAAHD,GAAQA,EACtBE,IAAAA,KACGC,EAbLC,EAAAzB,EAAA,CAAA,YAAA,KAAA,WAAA,eAAA,cAAA,UAAA,QAAA,QAAA,WAAA,WAAA,iBAAA,SAiBQ0B,EAAsBC,EAAWC,GAAjCF,kBACFG,EAAeC,EAAO,MACtBC,EAAYC,EAAY/B,EAAK4B,GAC7BI,EAAoC,IAAbb,EAC7Bc,EAAuDC,EAAiBjB,EAAUE,GAAnEgB,EAAaF,EAApBG,MAA6BC,EAAaJ,EAApBK,MACxBC,EAAuBC,EAC3BZ,EACAP,EACAJ,EACAb,EACAD,EACA6B,EACAP,GAGIgB,EAA0B,YAAV1B,EAAsB,eAAiBA,EAE7D,OACE2B,EAACC,cAAAC,EAAYC,OAAAC,OAAA,CAAA,EAAAP,GACVG,EAAMC,cACLhC,EAEEkC,OAAAC,OAAA,CAAA5C,GAAAA,EACAoC,MAAOD,EACP,cAAe/B,EACfL,UAAW8C,EAAGC,EAAOC,WAAYD,EAAOnC,GAAQmC,EAAOP,GAAgBN,EAAelC,GACtFD,IAAK8B,EACLR,KAAAA,GACGC,GAELpB,GAIR"}