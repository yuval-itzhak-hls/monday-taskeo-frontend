{"version":3,"file":"LinearProgressBar.js","sources":["../../../../../../src/components/ProgressBars/LinearProgressBar/LinearProgressBar.tsx"],"sourcesContent":["import React, { forwardRef, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport { SIZES } from \"../../../constants\";\nimport { getStyle } from \"../../../helpers/typesciptCssModulesHelper\";\nimport PercentageLabel from \"../PercentageLabel/PercentageLabel\";\nimport {\n  ProgressBarStyle as ProgressBarStyleEnum,\n  ProgressBarType as ProgressBarTypeEnum\n} from \"./LinearProgressBarConstants\";\nimport { LinearProgressBarSize, LinearProgressBarStyle } from \"./LinearProgressBar.types\";\nimport { calculatePercentage, getProgressBarClassNames } from \"./LinearProgressBarHelpers\";\nimport Bar from \"./Bar/Bar\";\nimport { VibeComponent, VibeComponentProps, withStaticProps } from \"../../../types\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport styles from \"./LinearProgressBar.module.scss\";\n\nexport interface LinearProgressBarProps extends VibeComponentProps {\n  /**\n   * Determine the progress bar style.\n   */\n  barStyle?: LinearProgressBarStyle;\n  /**\n   * The progress bar starting value.\n   */\n  min?: number;\n  /**\n   * The progress bar ending value.\n   */\n  max?: number;\n  /**\n   * The progress bar current value.\n   */\n  value?: number;\n  /**\n   * The progress bar secondary value.\n   */\n  valueSecondary?: number;\n  /**\n   * If set to *true*, animations are used.\n   */\n  animated?: boolean;\n  /**\n   * Set external styling to the progress bar.\n   */\n  className?: string;\n  /**\n   * Determine the progress bar height (Supported options exposed through\n   */\n  size?: LinearProgressBarSize;\n  /**\n   * Show progress bar progression in percentages\n   */\n  indicateProgress?: boolean;\n  /**\n   * Use multiple bars.\n   * ***Note:*** `value`, `valueSecondary` & `barStyle` won't be used\n   */\n  multi?: boolean;\n  /**\n   * Array of bar value objects {\n   * `value` - The progress value,\n   * `color` - hex [`#000000` ~ `#ffffff`] of the current bar\n   * }\n   */\n  multiValues?: {\n    /**\n     * The progress bar current value.\n     */\n    value?: number;\n    /**\n     * The bar color in hex - #000000 ~ #ffffff\n     */\n    color?: string;\n  }[];\n  /** ARIA description for the progress bar */\n  ariaLabel?: string;\n  /** Is the progress bar spread across the entire container width (width: 100%) */\n  fullWidth?: boolean;\n}\n\nconst LinearProgressBar: VibeComponent<LinearProgressBarProps, HTMLDivElement> & {\n  styles?: typeof ProgressBarStyleEnum;\n  barStyles?: typeof ProgressBarStyleEnum;\n  types?: typeof ProgressBarTypeEnum;\n  barTypes?: typeof ProgressBarTypeEnum;\n  sizes?: typeof SIZES;\n} = forwardRef(\n  (\n    {\n      min = 0,\n      max = 100,\n      value = 0,\n      valueSecondary = 0,\n      animated = true,\n      barStyle = \"primary\",\n      className,\n      size = \"small\",\n      indicateProgress = false,\n      multi = false,\n      multiValues = [],\n      ariaLabel = \"\",\n      id,\n      fullWidth = false,\n      \"data-testid\": dataTestId\n    }: LinearProgressBarProps,\n    ref\n  ) => {\n    const wrapperClassName = useMemo(() => {\n      return cx(\n        styles.wrapper,\n        {\n          [getStyle(styles, size.toString())]: size,\n          [styles.fullWidth]: fullWidth\n        },\n        className\n      );\n    }, [size, fullWidth, className]);\n\n    const valuePercentage = useMemo(() => {\n      if (multi) {\n        const firstValue = multiValues && multiValues.length && multiValues[0].value;\n        if (firstValue === null || firstValue === undefined) return 0;\n        return calculatePercentage(firstValue, min, max);\n      }\n      if (value === null || value === undefined) return 0;\n      return calculatePercentage(value, min, max);\n    }, [value, min, max, multi, multiValues]);\n\n    const renderMultiBars = useMemo(() => {\n      if (!multi) return null;\n      return (\n        <>\n          {[...multiValues].reverse().map(({ value: baseValue, color }, i) => (\n            <Bar\n              className={getProgressBarClassNames(baseValue)}\n              barStyle=\"none\"\n              value={baseValue}\n              animated={animated}\n              type=\"primary\"\n              color={color}\n              min={min}\n              max={max}\n              id={`bar_${color}_${i}`}\n              key={`bar_${color}_${i}`}\n            />\n          ))}\n        </>\n      );\n    }, [min, max, animated, multiValues, multi]);\n\n    const renderPercentage = indicateProgress ? (\n      <PercentageLabel forElement=\"linear-progress-bar\" value={valuePercentage} />\n    ) : null;\n\n    const renderBaseBars = !multi ? (\n      <>\n        <Bar\n          className={getProgressBarClassNames(value)}\n          barLabelName={ariaLabel}\n          barStyle={barStyle}\n          value={valueSecondary}\n          animated={animated}\n          type=\"secondary\"\n          min={min}\n          max={max}\n          data-testid={ComponentDefaultTestId.BAR_SECONDARY}\n        />\n        <Bar\n          className={getProgressBarClassNames(value)}\n          barStyle={barStyle}\n          value={value}\n          animated={animated}\n          type=\"primary\"\n          min={min}\n          max={max}\n          data-testid={ComponentDefaultTestId.BAR_PRIMARY}\n        />\n      </>\n    ) : null;\n\n    return (\n      <div\n        className={wrapperClassName}\n        ref={ref}\n        id={id}\n        data-testsid={dataTestId || getTestId(ComponentDefaultTestId.LINEAR_PROGRESS_BAR, id)}\n      >\n        <div className={styles.container}>\n          {renderBaseBars}\n          {renderMultiBars}\n        </div>\n        {renderPercentage}\n      </div>\n    );\n  }\n);\n\nexport default withStaticProps(LinearProgressBar, {\n  styles: ProgressBarStyleEnum,\n  barStyles: ProgressBarStyleEnum,\n  types: ProgressBarTypeEnum,\n  barTypes: ProgressBarTypeEnum,\n  sizes: SIZES\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","_ref$min","min","_ref$max","max","_ref$value","value","_ref$valueSecondary","valueSecondary","_ref$animated","animated","_ref$barStyle","barStyle","className","_ref$size","size","_ref$indicateProgress","indicateProgress","_ref$multi","multi","_ref$multiValues","multiValues","_ref$ariaLabel","ariaLabel","id","_ref$fullWidth","fullWidth","dataTestId","wrapperClassName","useMemo","cx","styles","wrapper","_defineProperty","getStyle","valuePercentage","firstValue","length","calculatePercentage","renderMultiBars","React","createElement","Fragment","_toConsumableArray","reverse","map","_ref2","i","baseValue","color","Bar","getProgressBarClassNames","type","concat","key","renderPercentage","PercentageLabel","forElement","renderBaseBars","barLabelName","ComponentDefaultTestId","BAR_SECONDARY","BAR_PRIMARY","getTestId","LINEAR_PROGRESS_BAR","container","ProgressBarStyleEnum","barStyles","types","ProgressBarTypeEnum","barTypes","sizes","SIZES"],"mappings":"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"}