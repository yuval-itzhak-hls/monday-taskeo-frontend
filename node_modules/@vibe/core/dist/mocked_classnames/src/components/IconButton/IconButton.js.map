{"version":3,"file":"IconButton.js","sources":["../../../../../src/components/IconButton/IconButton.tsx"],"sourcesContent":["import React, { AriaAttributes, forwardRef, Fragment, useMemo, useRef } from \"react\";\nimport cx from \"classnames\";\nimport { noop as NOOP } from \"lodash-es\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport Icon from \"../Icon/Icon\";\nimport { AddSmall } from \"@vibe/icons\";\nimport { getWidthHeight, Size } from \"./services/IconButton-helpers\";\nimport { SubIcon, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport Button from \"../Button/Button\";\nimport { BUTTON_ICON_SIZE } from \"../Button/ButtonConstants\";\nimport { ButtonColor, ButtonType } from \"../Button/Button.types\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport styles from \"./IconButton.module.scss\";\n\nexport interface IconButtonProps extends VibeComponentProps {\n  /**\n   * id to be added to the element\n   */\n  id?: string;\n  /**\n   * callback function when clicking the icon button\n   */\n  onClick?: (event: React.MouseEvent) => void;\n  /**\n   * the class name of the button wrapper\n   */\n  wrapperClassName?: string;\n  /**\n   * the class name of the button icon\n   */\n  iconClassName?: string;\n  /**\n   * Icon to be rendered\n   */\n  icon?: SubIcon;\n  /**\n   * element id to describe the button accordingly\n   * */\n  ariaLabeledBy?: string;\n  /**\n   * a11y property to be added, used for screen reader to know what kind of button it is\n   */\n  ariaLabel?: string;\n  /**\n   * aria for a button popup\n   */\n  ariaHasPopup?: React.HTMLProps<HTMLButtonElement>[\"aria-haspopup\"];\n  /**\n   * a11y property to be added, used for screen reader to know if the button is expanded\n   */\n  ariaExpanded?: boolean;\n  /**\n   * aria controls - receives id for the controlled region\n   */\n  ariaControls?: string;\n  \"aria-describedby\"?: AriaAttributes[\"aria-describedby\"];\n  /**\n   * a11y property to be added, used for screen reader to know if the button is hidden\n   */\n  \"aria-hidden\"?: AriaAttributes[\"aria-hidden\"];\n  /**\n   * Indicates the current \"pressed\" state of toggle buttons\n   */\n  \"aria-pressed\"?: AriaAttributes[\"aria-pressed\"];\n  /**\n   * Size of the icon\n   */\n  size?: Size;\n  /**\n   * Whether the tooltip should be displayed or not\n   */\n  hideTooltip?: boolean;\n  /**\n   * Props for Tooltip component\n   */\n  tooltipProps?: Partial<TooltipProps>;\n  /**\n   * Tooltip wraps the button icon, it will display in the tooltip, if not present the aria label will be shown\n   */\n  tooltipContent?: string;\n  /**\n   * Kind of button - like Button\n   */\n  kind?: ButtonType;\n  active?: boolean;\n  /** The button's color  */\n  color?: ButtonColor;\n  /**\n   * disabled state\n   */\n  disabled?: boolean;\n  /**\n   * if disabled - this will be shown in the tooltip\n   */\n  disabledReason?: string;\n  /** Change the focus indicator from around the button to within it */\n  insetFocus?: boolean;\n  /** Specifies the tab order of an element */\n  tabIndex?: number;\n  /** Show a loader instead of the icon  */\n  loading?: boolean;\n}\n\nconst IconButton: VibeComponent<IconButtonProps> & {\n  sizes?: typeof Button.sizes;\n  kinds?: typeof Button.kinds;\n  colors?: typeof Button.colors;\n} = forwardRef(\n  (\n    {\n      className,\n      wrapperClassName,\n      iconClassName,\n      id,\n      icon = AddSmall,\n      size = \"medium\",\n      tooltipProps = {} as TooltipProps,\n      tooltipContent,\n      ariaLabeledBy,\n      ariaLabel,\n      ariaHasPopup,\n      ariaExpanded,\n      ariaControls,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-hidden\": ariaHidden,\n      \"aria-pressed\": ariaPressed,\n      hideTooltip = false,\n      kind = \"tertiary\",\n      active,\n      disabled = false,\n      disabledReason,\n      onClick = NOOP,\n      color,\n      \"data-testid\": dataTestId,\n      insetFocus = false,\n      tabIndex,\n      loading = false\n    }: IconButtonProps,\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const overrideTooltipContent = useMemo(\n      () => tooltipProps?.content || tooltipContent,\n      [tooltipProps?.content, tooltipContent]\n    );\n\n    const buttonAriaLabel = useMemo(() => {\n      if (ariaLabel) return ariaLabel;\n      if (typeof overrideTooltipContent === \"string\") return overrideTooltipContent;\n      return undefined;\n    }, [ariaLabel, overrideTooltipContent]);\n\n    const iconSize = useMemo(() => {\n      switch (size) {\n        case \"xxs\":\n        case \"xs\":\n          return 16;\n        case \"small\":\n        case \"medium\":\n        case \"large\":\n          return BUTTON_ICON_SIZE;\n        default:\n          return 24;\n      }\n    }, [size]);\n\n    const overrideStyle = useMemo(() => {\n      let style = {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        padding: 0\n      } as React.CSSProperties;\n\n      if (size) {\n        style = { ...style, ...getWidthHeight(size) };\n      }\n      return style;\n    }, [size]);\n\n    const calculatedTooltipContent = useMemo(() => {\n      if (hideTooltip) return null;\n      if (disabled && disabledReason) return disabledReason;\n      if (overrideTooltipContent) return overrideTooltipContent as never;\n      return ariaLabel;\n    }, [hideTooltip, disabled, disabledReason, overrideTooltipContent, ariaLabel]);\n\n    const IconButtonWrapper = wrapperClassName ? \"div\" : Fragment;\n    const iconButtonWrapperProps = useMemo(() => {\n      return wrapperClassName ? { className: cx(wrapperClassName, styles.wrapper) } : {};\n    }, [wrapperClassName]);\n\n    return (\n      <IconButtonWrapper {...iconButtonWrapperProps}>\n        <Tooltip\n          {...tooltipProps}\n          content={calculatedTooltipContent}\n          referenceWrapperClassName={styles.referenceWrapper}\n        >\n          <Button\n            onClick={onClick}\n            disabled={disabled}\n            color={color}\n            kind={kind}\n            ariaLabeledBy={ariaLabeledBy}\n            ariaLabel={buttonAriaLabel}\n            ariaHasPopup={ariaHasPopup}\n            ariaExpanded={ariaExpanded}\n            ariaControls={ariaControls}\n            aria-describedby={ariaDescribedBy}\n            aria-hidden={ariaHidden}\n            aria-pressed={ariaPressed}\n            ref={mergedRef}\n            id={id}\n            data-testid={dataTestId || getTestId(ComponentDefaultTestId.ICON_BUTTON, id)}\n            noSidePadding\n            active={active}\n            className={className}\n            style={overrideStyle}\n            insetFocus={insetFocus}\n            tabIndex={tabIndex}\n            loading={loading}\n            loaderClassName={cx(styles.loader, getStyle(styles, size))}\n          >\n            <Icon icon={icon} iconType=\"svg\" iconSize={iconSize} ignoreFocusStyle className={iconClassName} />\n          </Button>\n        </Tooltip>\n      </IconButtonWrapper>\n    );\n  }\n);\n\nexport default withStaticProps(IconButton, {\n  sizes: Button.sizes,\n  kinds: Button.kinds,\n  colors: Button.colors\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","wrapperClassName","iconClassName","id","_ref$icon","icon","AddSmall","_ref$size","size","_ref$tooltipProps","tooltipProps","tooltipContent","ariaLabeledBy","ariaLabel","ariaHasPopup","ariaExpanded","ariaControls","ariaDescribedBy","ariaHidden","ariaPressed","_ref$hideTooltip","hideTooltip","_ref$kind","kind","active","_ref$disabled","disabled","disabledReason","_ref$onClick","onClick","NOOP","color","dataTestId","_ref$insetFocus","insetFocus","tabIndex","_ref$loading","loading","componentRef","useRef","mergedRef","useMergeRef","overrideTooltipContent","useMemo","content","buttonAriaLabel","iconSize","BUTTON_ICON_SIZE","overrideStyle","style","justifyContent","alignItems","padding","Object","assign","getWidthHeight","calculatedTooltipContent","IconButtonWrapper","Fragment","iconButtonWrapperProps","cx","styles","wrapper","React","createElement","Tooltip","referenceWrapperClassName","referenceWrapper","Button","getTestId","ComponentDefaultTestId","ICON_BUTTON","noSidePadding","loaderClassName","loader","getStyle","Icon","iconType","ignoreFocusStyle","sizes","kinds","colors"],"mappings":"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"}