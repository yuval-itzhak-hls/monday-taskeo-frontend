{"version":3,"file":"Counter.js","sources":["../../../../../src/components/Counter/Counter.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport useEventListener from \"../../hooks/useEventListener\";\nimport useAfterFirstRender from \"../../hooks/useAfterFirstRender\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport {\n  CounterColor as CounterColorEnum,\n  CounterSize as CounterSizeEnum,\n  CounterType as CounterTypeEnum\n} from \"./CounterConstants\";\nimport { CounterColor, CounterSize, CounterType } from \"./Counter.types\";\nimport { withStaticProps } from \"../../types\";\nimport styles from \"./Counter.module.scss\";\n\nexport interface CounterProps extends VibeComponentProps {\n  /** id to pass to the element */\n  id?: string;\n  /** element id to describe the counter accordingly */\n  ariaLabeledBy?: string;\n  /** Custom class names to pass to the component wrapper */\n  className?: string;\n  /** Custom class names to pass to the component */\n  counterClassName?: string;\n  /** The numeric value of the counter */\n  count?: number;\n  /** Counter description */\n  ariaLabel?: string;\n  /** The size of the counter */\n  size?: CounterSize;\n  kind?: CounterType;\n  /** The color of the counter */\n  color?: CounterColor;\n  /** maximum number of digits to display (see relevant story) */\n  maxDigits?: number;\n  /** Text prepended to counter value */\n  prefix?: string;\n  /** Callback to be called when the counter is clicked. */\n  onMouseDown?: (event: React.MouseEvent<HTMLSpanElement>) => void;\n  /** Disables the component's animation */\n  noAnimation?: boolean;\n}\n\nconst Counter: React.FC<CounterProps> & {\n  sizes?: typeof CounterSizeEnum;\n  colors?: typeof CounterColorEnum;\n  kinds?: typeof CounterTypeEnum;\n} = ({\n  className,\n  counterClassName,\n  count = 0,\n  size = \"large\",\n  kind = \"fill\",\n  color = \"primary\",\n  maxDigits = 3,\n  ariaLabeledBy = \"\",\n  ariaLabel = \"\",\n  id = \"\",\n  prefix = \"\",\n  onMouseDown = NOOP,\n  noAnimation = false,\n  \"data-testid\": dataTestId\n}: CounterProps) => {\n  const [countChangeAnimationState, setCountChangeAnimationState] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const setCountChangedAnimationActive = useCallback(() => {\n    setCountChangeAnimationState(true);\n  }, [setCountChangeAnimationState]);\n\n  const setCountChangedAnimationNotActive = useCallback(() => {\n    setCountChangeAnimationState(false);\n  }, [setCountChangeAnimationState]);\n\n  useEventListener({\n    eventName: \"animationend\",\n    callback: setCountChangedAnimationNotActive,\n    ref\n  });\n\n  const isAfterFirstRender = useAfterFirstRender();\n\n  useEffect(() => {\n    if (isAfterFirstRender.current) {\n      setCountChangedAnimationActive();\n    }\n  }, [count, isAfterFirstRender, setCountChangedAnimationActive]);\n\n  useEffect(() => {\n    if (maxDigits <= 0) {\n      console.error(\"Max digits must be a positive number\");\n    }\n  }, [maxDigits]);\n\n  const classNames = useMemo(() => {\n    return cx(\n      styles.counter,\n      getStyle(styles, camelCase(\"size-\" + size)),\n      getStyle(styles, camelCase(\"kind-\" + kind)),\n      getStyle(styles, camelCase(\"color-\" + color)),\n      {\n        [styles.withAnimation]: countChangeAnimationState\n      },\n      counterClassName\n    );\n  }, [size, kind, color, countChangeAnimationState, counterClassName]);\n\n  const counterId = \"counter\" + (id ? `-${id}` : \"\");\n  const countText = count?.toString().length > maxDigits ? `${10 ** maxDigits - 1}+` : String(count);\n  const counter = (\n    <span id={counterId} data-testid={dataTestId || getTestId(ComponentDefaultTestId.COUNTER, id)}>\n      {prefix + countText}\n    </span>\n  );\n\n  return (\n    <span\n      className={className}\n      aria-label={`${ariaLabel} ${countText}`}\n      aria-labelledby={ariaLabeledBy}\n      onMouseDown={onMouseDown}\n    >\n      <div className={classNames} aria-label={countText} ref={ref}>\n        {noAnimation ? (\n          counter\n        ) : (\n          <SwitchTransition mode=\"out-in\">\n            <CSSTransition\n              key={countText}\n              classNames={{\n                enter: styles.fadeEnter,\n                enterActive: styles.fadeEnterActive,\n                exit: styles.fadeExit,\n                exitActive: styles.fadeExitActive\n              }}\n              // @ts-expect-error @definitelyTyped typings expecting a single parameter for some reason when the function passed here is called with two parameters\n              // See https://github.com/reactjs/react-transition-group/blob/c89f807067b32eea6f68fd6c622190d88ced82e2/src/Transition.js#L522-L534\n              addEndListener={(node: HTMLElement, done: () => void) => {\n                node.addEventListener(\"transitionend\", done, false);\n              }}\n            >\n              <span id={counterId} data-testid={dataTestId || getTestId(ComponentDefaultTestId.COUNTER, id)}>\n                {prefix + countText}\n              </span>\n            </CSSTransition>\n          </SwitchTransition>\n        )}\n      </div>\n    </span>\n  );\n};\n\nexport default withStaticProps(Counter, {\n  sizes: CounterSizeEnum,\n  colors: CounterColorEnum,\n  kinds: CounterTypeEnum\n});\n"],"names":["withStaticProps","_ref","className","counterClassName","_ref$count","count","_ref$size","size","_ref$kind","kind","_ref$color","color","_ref$maxDigits","maxDigits","_ref$ariaLabeledBy","ariaLabeledBy","_ref$ariaLabel","ariaLabel","_ref$id","id","_ref$prefix","prefix","_ref$onMouseDown","onMouseDown","NOOP","_ref$noAnimation","noAnimation","dataTestId","_useState","useState","_useState2","_slicedToArray","countChangeAnimationState","setCountChangeAnimationState","ref","useRef","setCountChangedAnimationActive","useCallback","setCountChangedAnimationNotActive","useEventListener","eventName","callback","isAfterFirstRender","useAfterFirstRender","useEffect","current","console","error","classNames","useMemo","cx","styles","counter","getStyle","camelCase","_defineProperty","withAnimation","counterId","concat","countText","length","Math","pow","String","React","createElement","getTestId","ComponentDefaultTestId","COUNTER","SwitchTransition","mode","CSSTransition","key","enter","fadeEnter","enterActive","fadeEnterActive","exit","fadeExit","exitActive","fadeExitActive","addEndListener","node","done","addEventListener","sizes","CounterSizeEnum","colors","CounterColorEnum","kinds","CounterTypeEnum"],"mappings":"22BA+CA,IA8GeA,EAAAA,GA1GX,SAJSC,GAmBM,IAdjBC,EAASD,EAATC,UACAC,EAAgBF,EAAhBE,iBAAgBC,EAAAH,EAChBI,MAAAA,OAAQ,IAAHD,EAAG,EAACA,EAAAE,EAAAL,EACTM,KAAAA,OAAO,IAAHD,EAAG,QAAOA,EAAAE,EAAAP,EACdQ,KAAAA,OAAO,IAAHD,EAAG,OAAMA,EAAAE,EAAAT,EACbU,MAAAA,OAAQ,IAAHD,EAAG,UAASA,EAAAE,EAAAX,EACjBY,UAAAA,OAAY,IAAHD,EAAG,EAACA,EAAAE,EAAAb,EACbc,cAAAA,OAAgB,IAAHD,EAAG,GAAEA,EAAAE,EAAAf,EAClBgB,UAAAA,OAAY,IAAHD,EAAG,GAAEA,EAAAE,EAAAjB,EACdkB,GAAAA,OAAK,IAAHD,EAAG,GAAEA,EAAAE,EAAAnB,EACPoB,OAAAA,OAAS,IAAHD,EAAG,GAAEA,EAAAE,EAAArB,EACXsB,YAAAA,OAAcC,IAAHF,EAAGE,EAAIF,EAAAG,EAAAxB,EAClByB,YAAAA,OAAc,IAAHD,GAAQA,EACJE,EAAU1B,EAAzB,eAEA2B,EAAkEC,GAAS,GAAMC,EAAAC,EAAAH,EAAA,GAA1EI,EAAyBF,EAAA,GAAEG,EAA4BH,EAAA,GAExDI,EAAMC,EAAuB,MAE7BC,EAAiCC,GAAY,WACjDJ,GAA6B,EAC/B,GAAG,CAACA,IAEEK,EAAoCD,GAAY,WACpDJ,GAA6B,EAC/B,GAAG,CAACA,IAEJM,EAAiB,CACfC,UAAW,eACXC,SAAUH,EACVJ,IAAAA,IAGF,IAAMQ,EAAqBC,IAE3BC,GAAU,WACJF,EAAmBG,SACrBT,GAEH,GAAE,CAAC/B,EAAOqC,EAAoBN,IAE/BQ,GAAU,WACJ/B,EAAa,GACfiC,QAAQC,MAAM,uCAElB,GAAG,CAAClC,IAEJ,IAAMmC,EAAaC,GAAQ,WACzB,OAAOC,EACLC,EAAOC,QACPC,EAASF,EAAQG,EAAU,QAAU/C,IACrC8C,EAASF,EAAQG,EAAU,QAAU7C,IACrC4C,EAASF,EAAQG,EAAU,SAAW3C,IAAO4C,EAAA,CAAA,EAE1CJ,EAAOK,cAAgBxB,GAE1B7B,EAEJ,GAAG,CAACI,EAAME,EAAME,EAAOqB,EAA2B7B,IAE5CsD,GAAY,WAAatC,EAAEuC,IAAAA,OAAOvC,GAAO,IACzCwC,IAAYtD,aAAK,GAALA,MAAkBuD,QAAS/C,EAAS,GAAA6C,OAAMG,KAAAC,IAAA,GAAMjD,GAAY,OAAcR,EAAP0D,GAC/EX,GACJY,EAAMC,cAAA,OAAA,CAAA9C,GAAIsC,GAAS,cAAe9B,GAAcuC,EAAUC,EAAuBC,QAASjD,IACvFE,EAASsC,IAId,OACEK,EACEC,cAAA,OAAA,CAAA/D,UAAWA,yBACIe,OAASyC,OAAIC,IACX,kBAAA5C,EACjBQ,YAAaA,GAEbyC,EAAKC,cAAA,MAAA,CAAA/D,UAAW8C,EAAwB,aAAAW,GAAWzB,IAAKA,GACrDR,EACC0B,GAEAY,EAAAC,cAACI,EAAgB,CAACC,KAAK,UACrBN,EAAAC,cAACM,EACC,CAAAC,IAAKb,GACLX,WAAY,CACVyB,MAAOtB,EAAOuB,UACdC,YAAaxB,EAAOyB,gBACpBC,KAAM1B,EAAO2B,SACbC,WAAY5B,EAAO6B,gBAIrBC,eAAgB,SAACC,EAAmBC,GAClCD,EAAKE,iBAAiB,gBAAiBD,GAAM,EAC/C,GAEAnB,EAAMC,cAAA,OAAA,CAAA9C,GAAIsC,GAAwB,cAAA9B,GAAcuC,EAAUC,EAAuBC,QAASjD,IACvFE,EAASsC,OAQ1B,GAEwC,CACtC0B,MAAOC,EACPC,OAAQC,EACRC,MAAOC"}