{"version":3,"file":"ModalBasicLayout.js","sources":["../../../../../../../src/components/Modal/layouts/ModalBasicLayout/ModalBasicLayout.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { getTestId } from \"../../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../../tests/constants\";\nimport styles from \"./ModalBasicLayout.module.scss\";\nimport { ModalBasicLayoutProps } from \"./ModalBasicLayout.types\";\nimport Flex from \"../../../Flex/Flex\";\nimport Divider from \"../../../Divider/Divider\";\nimport ModalFooterShadow from \"../ModalFooterShadow\";\nimport ModalLayoutScrollableContent from \"../ModalLayoutScrollableContent\";\nimport useLayoutScrolledContent from \"../useLayoutScrolledContent\";\n\nconst ModalBasicLayout = forwardRef(\n  (\n    { children, className, id, \"data-testid\": dataTestId }: ModalBasicLayoutProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const { ref: contentRef, isContentScrolled, isScrollable, isScrolledToEnd, onScroll } = useLayoutScrolledContent();\n    const [header, content] = React.Children.toArray(children);\n\n    return (\n      <>\n        <Flex\n          direction=\"column\"\n          align=\"start\"\n          ref={ref}\n          className={cx(styles.layout, className)}\n          id={id}\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.MODAL_NEXT_BASIC_LAYOUT, id)}\n        >\n          <div className={styles.header}>{header}</div>\n          <Divider className={cx(styles.divider, { [styles.showDivider]: isContentScrolled })} withoutMargin />\n          <ModalLayoutScrollableContent onScroll={onScroll} className={styles.content} ref={contentRef}>\n            {content}\n          </ModalLayoutScrollableContent>\n        </Flex>\n        {isScrollable && <ModalFooterShadow show={!isScrolledToEnd} />}\n      </>\n    );\n  }\n);\n\nexport default ModalBasicLayout;\n"],"names":["ModalBasicLayout","forwardRef","_ref","ref","children","className","id","dataTestId","_useLayoutScrolledCon","useLayoutScrolledContent","contentRef","isContentScrolled","isScrollable","isScrolledToEnd","onScroll","_React$Children$toArr","React","Children","toArray","_React$Children$toArr2","_slicedToArray","header","content","createElement","Fragment","Flex","direction","align","cx","styles","layout","getTestId","ComponentDefaultTestId","MODAL_NEXT_BASIC_LAYOUT","Divider","divider","_defineProperty","showDivider","withoutMargin","ModalLayoutScrollableContent","ModalFooterShadow","show"],"mappings":"kjBAYMA,IAAAA,EAAmBC,GACvB,SAAAC,EAEEC,GACE,IAFAC,EAAQF,EAARE,SAAUC,EAASH,EAATG,UAAWC,EAAEJ,EAAFI,GAAmBC,EAAUL,EAAzB,eAG3BM,EAAwFC,IAA3EC,EAAUF,EAAfL,IAAiBQ,EAAiBH,EAAjBG,kBAAmBC,EAAYJ,EAAZI,aAAcC,EAAeL,EAAfK,gBAAiBC,EAAQN,EAARM,SAC3EC,EAA0BC,EAAMC,SAASC,QAAQd,GAASe,EAAAC,EAAAL,EAAA,GAAnDM,EAAMF,EAAA,GAAEG,EAAOH,EAAA,GAEtB,OACEH,EAAAO,cAAAP,EAAAQ,SAAA,KACER,EAAAO,cAACE,EACC,CAAAC,UAAU,SACVC,MAAM,QACNxB,IAAKA,EACLE,UAAWuB,EAAGC,EAAOC,OAAQzB,GAC7BC,GAAIA,EAAE,cACOC,GAAcwB,EAAUC,EAAuBC,wBAAyB3B,IAErFU,EAAAO,cAAA,MAAA,CAAKlB,UAAWwB,EAAOR,QAASA,GAChCL,EAACO,cAAAW,GAAQ7B,UAAWuB,EAAGC,EAAOM,QAAOC,EAAA,CAAA,EAAKP,EAAOQ,YAAc1B,IAAsB2B,eAAgB,IACrGtB,EAAAO,cAACgB,EAA6B,CAAAzB,SAAUA,EAAUT,UAAWwB,EAAOP,QAASnB,IAAKO,GAC/EY,IAGJV,GAAgBI,EAACO,cAAAiB,EAAkB,CAAAC,MAAO5B,IAGjD"}