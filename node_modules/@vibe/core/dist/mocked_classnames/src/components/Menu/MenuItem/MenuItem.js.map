{"version":3,"file":"MenuItem.js","sources":["../../../../../../src/components/Menu/MenuItem/MenuItem.tsx"],"sourcesContent":["import React, { AriaAttributes, ForwardedRef, ReactElement, forwardRef, useMemo, useRef } from \"react\";\nimport Tooltip, { TooltipProps } from \"../../../components/Tooltip/Tooltip\";\nimport Icon from \"../../../components/Icon/Icon\";\nimport useIsOverflowing from \"../../../hooks/useIsOverflowing/useIsOverflowing\";\nimport { SubIcon, VibeComponent, VibeComponentProps, withStaticProps } from \"../../../types\";\nimport { IconType } from \"../../Icon\";\nimport { CloseMenuOption, MenuChild } from \"../Menu/MenuConstants\";\nimport Label from \"../../Label/Label\";\nimport styles from \"./MenuItem.module.scss\";\nimport BaseMenuItem from \"./components/BaseMenuItem/BaseMenuItem\";\nimport MenuItemIcon from \"./components/MenuItemIcon/MenuItemIcon\";\nimport { TooltipPositions } from \"../../Tooltip/Tooltip.types\";\nimport { TooltipPositions as TooltipPositionsEnum } from \"../../Tooltip/TooltipConstants\";\nimport { SubmenuPosition } from \"./MenuItem.types\";\n\nexport interface MenuItemProps extends VibeComponentProps {\n  title?: string;\n  label?: string | React.ReactElement<typeof Label>;\n  icon?: SubIcon;\n  iconType?: IconType;\n  iconBackgroundColor?: string;\n  disabled?: boolean;\n  disableReason?: string;\n  selected?: boolean;\n  onClick?: (event: React.MouseEvent | React.KeyboardEvent) => void;\n  activeItemIndex?: number;\n  setActiveItemIndex?: (index: number) => void;\n  index?: number;\n  key?: string;\n  isParentMenuVisible?: boolean;\n  resetOpenSubMenuIndex?: () => void;\n  hasOpenSubMenu?: boolean;\n  setSubMenuIsOpenByIndex?: (index: number, isOpen: boolean) => void;\n  useDocumentEventListeners?: boolean;\n  tooltipContent?: string;\n  tooltipPosition?: TooltipPositions;\n  tooltipShowDelay?: number;\n  tooltipProps?: Partial<TooltipProps>;\n  onMouseLeave?: (event: React.MouseEvent) => void;\n  onMouseEnter?: (event: React.MouseEvent) => void;\n  /**\n   * Class name which is added to div which wraps an Icon\n   */\n  iconWrapperClassName?: string;\n  isInitialSelectedState?: boolean;\n  shouldScrollMenu?: boolean;\n  closeMenu?: (option: CloseMenuOption) => void;\n  menuRef?: React.RefObject<HTMLElement>;\n  //// TODO: [breaking] MenuItem can accept only Menu element as first level child, it accepts MenuChild[] as children even though it is not valid\n  children?: MenuChild | MenuChild[];\n  /**\n   * Type of menu item with sub menu, which has two click/hover options-\n   *    1. click on the main menu item will trigger onClick\n   *    2. click/hover on icon button will open the sub menu\n   */\n  splitMenuItem?: boolean;\n  \"aria-label\"?: AriaAttributes[\"aria-label\"];\n  submenuPosition?: SubmenuPosition;\n  /**\n   * When set to `true`, submenu's content and size changes would automatically trigger repositioning.\n   *\n   * This is useful for when submenu's content may grow or shrink without a re-render being triggered.\n   */\n  autoAdjustOnSubMenuContentResize?: boolean;\n}\n\nexport interface MenuItemTitleComponentProps extends Omit<MenuItemProps, \"title\"> {\n  title: ReactElement;\n  \"aria-label\": NonNullable<AriaAttributes[\"aria-label\"]>;\n}\n\nconst MenuItem: VibeComponent<MenuItemProps | MenuItemTitleComponentProps> & {\n  iconType?: typeof Icon.type;\n  isSelectable?: boolean;\n  isMenuChild?: boolean;\n  tooltipPositions?: typeof TooltipPositionsEnum;\n} = forwardRef(\n  (\n    {\n      className,\n      iconWrapperClassName,\n      title = \"\",\n      label = \"\",\n      icon = \"\",\n      iconType,\n      iconBackgroundColor,\n      disabled = false,\n      disableReason,\n      selected = false,\n      key,\n      children,\n      tooltipContent,\n      tooltipPosition = \"right\",\n      tooltipShowDelay = 300,\n      tooltipProps,\n      \"aria-label\": ariaLabel,\n      ...baseMenuProps\n    }: MenuItemProps | MenuItemTitleComponentProps,\n    ref: ForwardedRef<HTMLElement>\n  ) => {\n    const titleRef = useRef();\n\n    // if \"title\" is a component ariaLabel is mandatory\n    const iconLabel = ariaLabel ?? (title as string);\n\n    const isTitleHoveredAndOverflowing = useIsOverflowing({ ref: titleRef });\n    const shouldShowTooltip = isTitleHoveredAndOverflowing || disabled || tooltipContent;\n\n    const finalTooltipContent = useMemo(() => {\n      if (disabled) return disableReason;\n      if (tooltipContent) return tooltipContent;\n      return title;\n    }, [disableReason, disabled, title, tooltipContent]);\n\n    const renderLabel = useMemo(() => {\n      if (!label) return;\n      if (typeof label === \"string\") {\n        return <Label kind=\"line\" text={label} />;\n      }\n      if (React.isValidElement(label) && label.type === Label) {\n        return label;\n      }\n    }, [label]);\n\n    return (\n      <Tooltip\n        content={shouldShowTooltip ? finalTooltipContent : null}\n        position={tooltipPosition}\n        showDelay={tooltipShowDelay}\n        {...tooltipProps}\n      >\n        <BaseMenuItem\n          key={key}\n          ref={ref}\n          subMenu={children}\n          className={className}\n          disabled={disabled}\n          selected={selected}\n          {...baseMenuProps}\n        >\n          {Boolean(icon) && (\n            <MenuItemIcon\n              icon={icon}\n              type={iconType}\n              label={iconLabel}\n              disabled={disabled}\n              selected={selected}\n              backgroundColor={iconBackgroundColor}\n              wrapperClassName={iconWrapperClassName}\n            />\n          )}\n          <div ref={titleRef} className={styles.title}>\n            {title}\n          </div>\n          {renderLabel}\n        </BaseMenuItem>\n      </Tooltip>\n    );\n  }\n);\n\nObject.assign(MenuItem, {\n  isSelectable: true,\n  isMenuChild: true\n});\n\nexport default withStaticProps(MenuItem, {\n  iconType: Icon.type,\n  tooltipPositions: TooltipPositionsEnum\n});\n"],"names":["MenuItem","forwardRef","_a","ref","className","iconWrapperClassName","_a$title","title","_a$label","label","_a$icon","icon","iconType","iconBackgroundColor","_a$disabled","disabled","disableReason","_a$selected","selected","key","children","tooltipContent","_a$tooltipPosition","tooltipPosition","_a$tooltipShowDelay","tooltipShowDelay","tooltipProps","ariaLabel","baseMenuProps","__rest","titleRef","useRef","iconLabel","shouldShowTooltip","useIsOverflowing","finalTooltipContent","useMemo","renderLabel","React","createElement","Label","kind","text","isValidElement","type","Tooltip","Object","assign","content","position","showDelay","BaseMenuItem","subMenu","MenuItemIcon","backgroundColor","wrapperClassName","styles","isSelectable","isMenuChild","withStaticProps","Icon","tooltipPositions","TooltipPositionsEnum"],"mappings":"snBAuEA,IAAMA,EAKFC,GACF,SACEC,EAoBAC,OAnBEC,EAgBuBF,EAhBvBE,UACAC,EAeuBH,EAfvBG,qBAAoBC,EAeGJ,EAdvBK,MAAAA,OAAQ,IAAHD,EAAG,GAAEA,EAAAE,EAcaN,EAbvBO,MAAAA,OAAQ,IAAHD,EAAG,GAAEA,EAAAE,EAaaR,EAZvBS,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EACTE,EAWuBV,EAXvBU,SACAC,EAUuBX,EAVvBW,oBAAmBC,EAUIZ,EATvBa,SAAAA,OAAW,IAAHD,GAAQA,EAChBE,EAQuBd,EARvBc,cAAaC,EAQUf,EAPvBgB,SAAAA,OAAW,IAAHD,GAAQA,EAChBE,EAMuBjB,EANvBiB,IACAC,EAKuBlB,EALvBkB,SACAC,EAIuBnB,EAJvBmB,eAAcC,EAISpB,EAHvBqB,gBAAAA,OAAkB,IAAHD,EAAG,QAAOA,EAAAE,EAGFtB,EAFvBuB,iBAAAA,OAAmB,IAAHD,EAAG,IAAGA,EACtBE,EACuBxB,EADvBwB,aACcC,EAASzB,EAAvB,cACG0B,EAlBLC,EAAA3B,EAAA,CAAA,YAAA,uBAAA,QAAA,QAAA,OAAA,WAAA,sBAAA,WAAA,gBAAA,WAAA,MAAA,WAAA,iBAAA,kBAAA,mBAAA,eAAA,eAsBM4B,EAAWC,IAGXC,EAAYL,QAAAA,EAAcpB,EAG1B0B,EAD+BC,EAAiB,CAAE/B,IAAK2B,KACHf,GAAYM,EAEhEc,EAAsBC,GAAQ,WAClC,OAAIrB,EAAiBC,EACjBK,GACGd,CACR,GAAE,CAACS,EAAeD,EAAUR,EAAOc,IAE9BgB,EAAcD,GAAQ,WAC1B,GAAK3B,EACL,MAAqB,iBAAVA,EACF6B,EAAAC,cAACC,EAAK,CAACC,KAAK,OAAOC,KAAMjC,IAE9B6B,EAAMK,eAAelC,IAAUA,EAAMmC,OAASJ,EACzC/B,OADT,CAGF,GAAG,CAACA,IAEJ,OACE6B,EAACC,cAAAM,EACCC,OAAAC,OAAA,CAAAC,QAASf,EAAoBE,EAAsB,KACnDc,SAAU1B,EACV2B,UAAWzB,GACPC,GAEJY,EAACC,cAAAY,EACCL,OAAAC,OAAA,CAAA5B,IAAKA,EACLhB,IAAKA,EACLiD,QAAShC,EACThB,UAAWA,EACXW,SAAUA,EACVG,SAAUA,GACNU,KAEKjB,GACP2B,gBAACe,EAAY,CACX1C,KAAMA,EACNiC,KAAMhC,EACNH,MAAOuB,EACPjB,SAAUA,EACVG,SAAUA,EACVoC,gBAAiBzC,EACjB0C,iBAAkBlD,IAGtBiC,EAAKC,cAAA,MAAA,CAAApC,IAAK2B,EAAU1B,UAAWoD,EAAOjD,OACnCA,GAEF8B,GAIT,IAGFS,OAAOC,OAAO/C,EAAU,CACtByD,cAAc,EACdC,aAAa,IAGf,IAAeC,EAAAA,EAAgB3D,EAAU,CACvCY,SAAUgD,EAAKhB,KACfiB,iBAAkBC"}