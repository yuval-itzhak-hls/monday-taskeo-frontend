{"version":3,"file":"List.js","sources":["../../../../../src/components/List/List.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, {\n  AriaAttributes,\n  CSSProperties,\n  forwardRef,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from \"react\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport useKeyEvent from \"../../hooks/useKeyEvent\";\nimport { VirtualizedListItems } from \"./VirtualizedListItems/VirtualizedListItems\";\nimport { keyCodes, UP_DOWN_ARROWS } from \"../../constants/keyCodes\";\nimport { VibeComponent, withStaticProps, VibeComponentProps } from \"../../types\";\nimport { ListItemProps } from \"../ListItem/ListItem\";\nimport { ListTitleProps } from \"../ListTitle/ListTitle\";\nimport { ListWrapperComponentType as ListWrapperComponentTypeEnum } from \"./ListConstants\";\nimport { ListElement } from \"./List.types\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { ListContext } from \"./utils/ListContext\";\nimport {\n  getListItemComponentType,\n  getListItemIdByIndex,\n  getListItemIndexById,\n  getNextListItemIndex,\n  getPrevListItemIndex,\n  isListItem,\n  useListId\n} from \"./utils/ListUtils\";\nimport styles from \"./List.module.scss\";\n\nexport interface ListProps extends VibeComponentProps {\n  /**\n   * the wrapping component to wrap the List Items [div, nav, ul, ol]\n   */\n  component?: ListElement;\n  /**\n   * ARIA label string to describe to list\n   */\n  ariaLabel?: string;\n  /**\n   * ARIA described by string to reference an id to describe by\n   */\n  ariaDescribedBy?: string;\n  \"aria-controls\"?: AriaAttributes[\"aria-controls\"];\n  children?: ReactElement<ListItemProps | ListTitleProps> | ReactElement<ListItemProps | ListTitleProps>[];\n  /**\n   * Using virtualized list for rendering only the items which visible to the user in any given user (performance optimization)\n   */\n  renderOnlyVisibleItems?: boolean;\n  style?: CSSProperties;\n}\n\nconst List: VibeComponent<ListProps> & {\n  components?: typeof ListWrapperComponentTypeEnum;\n} = forwardRef(\n  (\n    {\n      className,\n      id,\n      component = List.components.UL,\n      children,\n      ariaLabel,\n      ariaDescribedBy,\n      \"aria-controls\": ariaControls,\n      renderOnlyVisibleItems = false,\n      style,\n      \"data-testid\": dataTestId\n    }: ListProps,\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n    const childrenRefs: React.MutableRefObject<HTMLElement[]> = useRef([]);\n\n    const overrideId = useListId(id);\n    const [focusIndex, setFocusIndex] = useState(0);\n    const Component = component;\n\n    const updateFocusedItem = useCallback((id: string) => {\n      setFocusIndex(getListItemIndexById(childrenRefs, id));\n      componentRef?.current?.setAttribute(\"aria-activedescendant\", id);\n    }, []);\n\n    const onUpDownArrows = useCallback(\n      (event: KeyboardEvent) => {\n        if (renderOnlyVisibleItems) {\n          return;\n        }\n        event.preventDefault();\n\n        const isUpKey = event.key === keyCodes.UP_ARROW;\n        const isDownKey = event.key === keyCodes.DOWN_ARROW;\n        let overrideFocusIndex = undefined;\n\n        if (isDownKey && focusIndex + 1 < childrenRefs.current.length) {\n          overrideFocusIndex = getNextListItemIndex(focusIndex, childrenRefs);\n        } else if (isUpKey && focusIndex > 0) {\n          overrideFocusIndex = getPrevListItemIndex(focusIndex, childrenRefs);\n        }\n        if (overrideFocusIndex !== undefined) {\n          updateFocusedItem(getListItemIdByIndex(childrenRefs, overrideFocusIndex));\n          childrenRefs.current[overrideFocusIndex].focus();\n        }\n      },\n      [focusIndex, renderOnlyVisibleItems, updateFocusedItem]\n    );\n\n    useKeyEvent({\n      keys: UP_DOWN_ARROWS,\n      callback: onUpDownArrows,\n      ref: componentRef\n    });\n\n    useEffect(() => {\n      const selectedItemIndex = childrenRefs.current.findIndex(\n        child => child instanceof HTMLElement && isListItem(child) && child?.getAttribute(\"aria-selected\") === \"true\"\n      );\n      if (selectedItemIndex !== -1) {\n        updateFocusedItem(getListItemIdByIndex(childrenRefs, selectedItemIndex));\n      } else {\n        const firstFocusableIndex = childrenRefs.current.findIndex(child => isListItem(child));\n        if (firstFocusableIndex !== -1) {\n          updateFocusedItem(getListItemIdByIndex(childrenRefs, firstFocusableIndex));\n        }\n      }\n    }, [updateFocusedItem]);\n\n    const overrideChildren = useMemo(() => {\n      let override: ReactElement | ReactElement[] = Array.isArray(children) ? children : [children];\n      if (renderOnlyVisibleItems) {\n        override = <VirtualizedListItems>{override}</VirtualizedListItems>;\n      } else {\n        childrenRefs.current = childrenRefs.current.slice(0, override.length);\n        override = React.Children.map(override, (child, index) => {\n          if (!React.isValidElement(child)) {\n            return child;\n          }\n          const id = (child.props as { id: string }).id || `${overrideId}-item-${index}`;\n          const currentRef = childrenRefs.current[index];\n          const isFocusableItem = currentRef === undefined || currentRef === null || isListItem(currentRef);\n          return React.cloneElement(child, {\n            // @ts-ignore not sure how to deal with ref here\n            ref: ref => (childrenRefs.current[index] = ref),\n            tabIndex: focusIndex === index && isFocusableItem ? 0 : -1,\n            id,\n            component: getListItemComponentType(component)\n          });\n        });\n      }\n\n      return override;\n    }, [children, component, focusIndex, overrideId, renderOnlyVisibleItems]);\n\n    return (\n      <ListContext.Provider value={{ updateFocusedItem }}>\n        <Component\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.LIST, id)}\n          ref={mergedRef}\n          style={style}\n          className={cx(styles.list, className)}\n          id={overrideId}\n          aria-label={ariaLabel}\n          aria-describedby={ariaDescribedBy}\n          aria-controls={ariaControls}\n          tabIndex={-1}\n          role=\"listbox\"\n        >\n          {overrideChildren}\n        </Component>\n      </ListContext.Provider>\n    );\n  }\n);\n\nexport default withStaticProps(List, {\n  components: ListWrapperComponentTypeEnum\n});\n"],"names":["List","forwardRef","_ref","ref","className","id","_ref$component","component","components","UL","children","ariaLabel","ariaDescribedBy","ariaControls","_ref$renderOnlyVisibl","renderOnlyVisibleItems","style","dataTestId","componentRef","useRef","mergedRef","useMergeRef","childrenRefs","overrideId","useListId","_useState","useState","_useState2","_slicedToArray","focusIndex","setFocusIndex","Component","updateFocusedItem","useCallback","getListItemIndexById","_a","current","setAttribute","onUpDownArrows","event","preventDefault","isUpKey","key","keyCodes","UP_ARROW","overrideFocusIndex","undefined","DOWN_ARROW","length","getNextListItemIndex","getPrevListItemIndex","getListItemIdByIndex","focus","useKeyEvent","keys","UP_DOWN_ARROWS","callback","useEffect","selectedItemIndex","findIndex","child","HTMLElement","isListItem","getAttribute","firstFocusableIndex","overrideChildren","useMemo","override","Array","isArray","React","createElement","VirtualizedListItems","slice","Children","map","index","isValidElement","props","concat","currentRef","isFocusableItem","cloneElement","_ref2","tabIndex","getListItemComponentType","ListContext","Provider","value","getTestId","ComponentDefaultTestId","LIST","cx","styles","list","role","withStaticProps","ListWrapperComponentTypeEnum"],"mappings":"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"}