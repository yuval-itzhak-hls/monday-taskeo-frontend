{"version":3,"file":"MultiValueContainer.js","sources":["../../../../../../../src/components/Dropdown/components/MultiValueContainer/MultiValueContainer.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { components } from \"react-select\";\nimport cx from \"classnames\";\nimport { useHiddenOptionsData } from \"../../hooks/useHiddenOptionsData\";\nimport Counter from \"../../../Counter/Counter\";\nimport Dialog from \"../../../Dialog/Dialog\";\nimport DialogContentContainer from \"../../../DialogContentContainer/DialogContentContainer\";\nimport Chips from \"../../../Chips/Chips\";\nimport classes from \"./MultiValueContainer.module.scss\";\n\nconst DIALOG_OFFSET_Y = 5;\n\nexport default function Container({ children, selectProps, ...otherProps }) {\n  const {\n    isDisabled,\n    placeholder,\n    inputValue,\n    selectProps: customProps = {},\n    withMandatoryDefaultOptions,\n    readOnly\n  } = selectProps;\n  const { selectedOptions, onSelectedDelete, isMultiline, popupsContainerSelector, size } = customProps;\n  const clickHandler = children[1];\n  const [ref, setRef] = useState();\n  const [isCounterShown, setIsCounterShown] = useState(false);\n  const showPlaceholder = selectedOptions.length === 0 && !inputValue;\n  const chipWrapperClassName = classes[\"chip-with-input-wrapper\"];\n  const chipClassName = cx(\n    isMultiline ? classes[\"multiselect-chip-multi-line\"] : classes[`multiselect-chip-single-line-${size}`],\n    { [classes[\"multiselect-chip-disabled\"]]: isDisabled }\n  );\n\n  const { overflowIndex, hiddenOptionsCount } = useHiddenOptionsData({\n    isMultiline,\n    ref,\n    chipClassName,\n    chipWrapperClassName,\n    selectedOptionsCount: selectedOptions.length,\n    isCounterShown\n  });\n\n  useEffect(() => {\n    setIsCounterShown(hiddenOptionsCount > 0);\n  }, [hiddenOptionsCount]);\n\n  const onDelete = useCallback(\n    option => {\n      onSelectedDelete(option.value, { action: \"remove-value\", removedValue: option });\n    },\n    [onSelectedDelete]\n  );\n\n  const DropdownChipColors = [\"primary\", \"negative\", \"positive\"];\n  const renderOptions = useCallback(\n    (from = 0, to = selectedOptions.length) =>\n      selectedOptions.map((option, index) => {\n        const overrideChipColor = DropdownChipColors.includes(option.chipColor) ? option.chipColor : \"primary\";\n        return index >= from && index < to ? (\n          <Chips\n            data-testid=\"value-container-chip\"\n            key={option.value}\n            className={cx(classes.chips, chipClassName)}\n            noAnimation\n            disabled={isDisabled}\n            id={option.value}\n            label={option.label}\n            onDelete={() => onDelete(option)}\n            disableClickableBehavior\n            onMouseDown={e => {\n              e.stopPropagation();\n            }}\n            readOnly={readOnly || (withMandatoryDefaultOptions && option.isMandatory)}\n            allowTextSelection={readOnly}\n            leftRenderer={option.leftRenderer}\n            leftAvatar={option.leftAvatar}\n            leftIcon={option.leftIcon}\n            color={overrideChipColor}\n          />\n        ) : null;\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [selectedOptions, chipClassName, isDisabled, readOnly, withMandatoryDefaultOptions, onDelete, size]\n  );\n\n  return (\n    <components.ValueContainer selectProps={selectProps} {...otherProps}>\n      <div\n        className={classes[\"value-container\"]}\n        onTouchEndCapture={e => {\n          e.stopPropagation();\n        }}\n      >\n        {showPlaceholder && (\n          <div className={classes[\"placeholder-container\"]}>\n            <components.Placeholder {...otherProps}>{placeholder}</components.Placeholder>\n          </div>\n        )}\n        <div\n          className={cx(classes[\"value-container-chips\"], { [classes[\"without-placeholder\"]]: !showPlaceholder })}\n          ref={newRef => setRef(newRef)}\n          data-testid=\"value-container-chips\"\n        >\n          {isCounterShown ? (\n            <>\n              {renderOptions(0, overflowIndex - 1)}\n              <div className={chipWrapperClassName}>\n                {renderOptions(overflowIndex - 1, overflowIndex)}\n                {clickHandler}\n              </div>\n              {renderOptions(overflowIndex)}\n            </>\n          ) : (\n            <>\n              {renderOptions(0, selectedOptions.length - 1)}\n              <div className={chipWrapperClassName}>\n                {renderOptions(selectedOptions.length - 1)}\n                {clickHandler}\n              </div>\n            </>\n          )}\n        </div>\n        <div>\n          {isCounterShown && (\n            <Dialog\n              content={() => (\n                <DialogContentContainer className={classes.valueDialogContent}>\n                  {renderOptions(overflowIndex)}\n                </DialogContentContainer>\n              )}\n              containerSelector={popupsContainerSelector}\n              tooltip\n              showTrigger=\"click\"\n              hideTrigger=\"clickoutside\"\n              position=\"bottom\"\n              moveBy={{ main: DIALOG_OFFSET_Y }}\n            >\n              <Counter\n                kind=\"line\"\n                prefix=\"+\"\n                count={hiddenOptionsCount}\n                onMouseDown={e => {\n                  e.stopPropagation();\n                }}\n                noAnimation\n              />\n            </Dialog>\n          )}\n        </div>\n      </div>\n    </components.ValueContainer>\n  );\n}\n"],"names":["Container","_ref","children","selectProps","otherProps","_objectWithoutProperties","_excluded","isDisabled","placeholder","inputValue","_selectProps$selectPr","customProps","withMandatoryDefaultOptions","readOnly","selectedOptions","onSelectedDelete","isMultiline","popupsContainerSelector","size","clickHandler","_useState","useState","_useState2","_slicedToArray","ref","setRef","_useState3","_useState4","isCounterShown","setIsCounterShown","showPlaceholder","length","chipWrapperClassName","classes","chipClassName","cx","concat","_defineProperty","_useHiddenOptionsData","useHiddenOptionsData","selectedOptionsCount","overflowIndex","hiddenOptionsCount","useEffect","onDelete","useCallback","option","value","action","removedValue","DropdownChipColors","renderOptions","from","arguments","undefined","to","map","index","overrideChipColor","includes","chipColor","React","createElement","Chips","key","className","chips","noAnimation","disabled","id","label","disableClickableBehavior","onMouseDown","e","stopPropagation","isMandatory","allowTextSelection","leftRenderer","leftAvatar","leftIcon","color","components","ValueContainer","_extends","onTouchEndCapture","Placeholder","newRef","Fragment","Dialog","content","DialogContentContainer","valueDialogContent","containerSelector","tooltip","showTrigger","hideTrigger","position","moveBy","main","Counter","kind","prefix","count"],"mappings":"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"}