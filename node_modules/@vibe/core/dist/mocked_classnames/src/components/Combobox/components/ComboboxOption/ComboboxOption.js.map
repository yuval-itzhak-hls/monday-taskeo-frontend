{"version":3,"file":"ComboboxOption.js","sources":["../../../../../../../src/components/Combobox/components/ComboboxOption/ComboboxOption.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { RefObject, useCallback, useEffect, useMemo, useRef } from \"react\";\nimport Icon from \"../../../Icon/Icon\";\nimport Tooltip from \"../../../Tooltip/Tooltip\";\nimport useIsOverflowing from \"../../../../hooks/useIsOverflowing/useIsOverflowing\";\nimport { keyCodes } from \"../../../../constants/keyCodes\";\nimport { getOptionId } from \"../../helpers\";\nimport { SubIcon, withStaticProps } from \"../../../../types\";\nimport {\n  ComboboxOptionIconType as ComboboxOptionIconTypeEnum,\n  IComboboxOption,\n  IComboboxOptionEvents\n} from \"../ComboboxConstants\";\nimport { ComboboxOptionIconType } from \"../../Combobox.types\";\nimport { ComponentDefaultTestId, getTestId } from \"../../../../tests/test-ids-utils\";\nimport styles from \"./ComboboxOption.module.scss\";\n\nexport interface ComboboxOptionProps extends IComboboxOptionEvents {\n  index?: number;\n  option?: IComboboxOption;\n  className?: string;\n  isActive?: boolean;\n  visualFocus?: boolean;\n  scrollRef?: RefObject<HTMLElement>;\n  scrollOffset?: number;\n  optionLineHeight?: number;\n  shouldScrollWhenActive?: boolean;\n  optionRenderer?: (option: IComboboxOption) => JSX.Element;\n}\n\nconst ComboboxOption: React.FC<ComboboxOptionProps> & { iconTypes?: typeof ComboboxOptionIconTypeEnum } = ({\n  index,\n  option,\n  className,\n  isActive,\n  visualFocus,\n  scrollRef,\n  scrollOffset = 100,\n  onOptionClick,\n  onOptionLeave,\n  onOptionHover,\n  optionLineHeight,\n  shouldScrollWhenActive = true,\n  optionRenderer = null\n}) => {\n  const {\n    id,\n    leftIcon,\n    leftIconType,\n    rightIcon,\n    rightIconType,\n    label,\n    iconSize = 18,\n    disabled,\n    selected,\n    ariaLabel,\n    belongToCategory = false\n  } = option;\n  let { tooltipContent } = option;\n\n  const ref = useRef(null);\n  const labelRef = useRef();\n\n  const isOptionOverflowing = useIsOverflowing({ ref: labelRef });\n\n  useEffect(() => {\n    const element = ref.current;\n    if (visualFocus && element && shouldScrollWhenActive) {\n      if (scrollRef?.current && element) {\n        // not supported with virtualized atm, need their scrollRef (element with overflow-y auto that has the scroll)\n        scrollRef.current.scrollTop = element.offsetTop - scrollOffset;\n      } else {\n        element?.scrollIntoView?.({ behaviour: \"smooth\" });\n      }\n    }\n  }, [ref, visualFocus, shouldScrollWhenActive, scrollRef, scrollOffset, belongToCategory]);\n\n  const renderIcon = (\n    icon: SubIcon | ((className: string) => JSX.Element),\n    iconType: ComboboxOptionIconType,\n    className: string\n  ) => {\n    if (iconType === \"renderer\") {\n      return (icon as (className: string) => JSX.Element)(cx(styles.optionIcon, className));\n    }\n\n    return (\n      <Icon\n        className={cx(styles.optionIcon, className)}\n        iconType=\"font\"\n        icon={icon as SubIcon}\n        iconSize={iconSize}\n        ignoreFocusStyle\n      />\n    );\n  };\n\n  const onClick = useCallback(\n    (event: React.MouseEvent) => {\n      if (disabled) return;\n      onOptionClick(event, index, option, true);\n    },\n    [index, option, onOptionClick, disabled]\n  );\n\n  const onMouseLeave = useCallback(\n    (event: React.MouseEvent) => {\n      if (disabled) return;\n      onOptionLeave(event, index, option, true);\n    },\n    [index, option, onOptionLeave, disabled]\n  );\n\n  const onMouseEnter = useCallback(\n    (event: React.MouseEvent) => {\n      if (disabled) return;\n      onOptionHover(event, index, option, true);\n    },\n    [index, option, onOptionHover, disabled]\n  );\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === keyCodes.ENTER || event.key === keyCodes.SPACE) {\n        onOptionClick(event, index, option, false);\n      }\n    },\n    [onOptionClick, index, option]\n  );\n  if (!tooltipContent) {\n    tooltipContent = isOptionOverflowing ? label : null;\n  }\n\n  const optionRendererValue = useMemo(() => optionRenderer && optionRenderer(option), [optionRenderer, option]);\n\n  const optionValue = (\n    <>\n      {leftIcon && renderIcon(leftIcon, leftIconType, styles.left)}\n      <div ref={labelRef} className={cx(styles.optionLabel)}>\n        {label}\n      </div>\n      {rightIcon && renderIcon(rightIcon, rightIconType, \"\")}\n    </>\n  );\n\n  return (\n    <Tooltip content={tooltipContent}>\n      <div\n        ref={ref}\n        key={id || label}\n        aria-level={belongToCategory ? 2 : 1}\n        aria-selected={isActive}\n        aria-label={ariaLabel || label}\n        id={getOptionId(id, index)}\n        data-testid={getTestId(ComponentDefaultTestId.COMBOBOX_OPTION, index)}\n        onMouseEnter={onMouseEnter}\n        onClick={onClick}\n        onKeyDown={onKeyDown}\n        onMouseLeave={onMouseLeave}\n        className={cx(styles.comboboxOption, className, {\n          [styles.disabled]: disabled,\n          [styles.selected]: selected,\n          [styles.active]: isActive,\n          [styles.activeOutline]: visualFocus\n        })}\n        style={{ height: optionLineHeight }}\n      >\n        {optionRendererValue || optionValue}\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default withStaticProps(ComboboxOption, { iconTypes: ComboboxOptionIconTypeEnum });\n"],"names":["withStaticProps","_ref","index","option","className","isActive","visualFocus","scrollRef","_ref$scrollOffset","scrollOffset","onOptionClick","onOptionLeave","onOptionHover","optionLineHeight","_ref$shouldScrollWhen","shouldScrollWhenActive","_ref$optionRenderer","optionRenderer","id","leftIcon","leftIconType","rightIcon","rightIconType","label","_option$iconSize","iconSize","disabled","selected","ariaLabel","_option$belongToCateg","belongToCategory","tooltipContent","ref","useRef","labelRef","isOptionOverflowing","useIsOverflowing","useEffect","element","current","scrollTop","offsetTop","_a","scrollIntoView","call","behaviour","renderIcon","icon","iconType","cx","styles","optionIcon","React","createElement","Icon","ignoreFocusStyle","onClick","useCallback","event","onMouseLeave","onMouseEnter","onKeyDown","key","keyCodes","ENTER","SPACE","optionRendererValue","useMemo","optionValue","Fragment","left","optionLabel","Tooltip","content","getOptionId","getTestId","ComponentDefaultTestId","COMBOBOX_OPTION","comboboxOption","_defineProperty","active","activeOutline","style","height","iconTypes","ComboboxOptionIconTypeEnum"],"mappings":"0vBA8BA,IA+IeA,EAAAA,GA/I2F,SAAtFC,GAcf,IAbHC,EAAKD,EAALC,MACAC,EAAMF,EAANE,OACAC,EAASH,EAATG,UACAC,EAAQJ,EAARI,SACAC,EAAWL,EAAXK,YACAC,EAASN,EAATM,UAASC,EAAAP,EACTQ,aAAAA,OAAe,IAAHD,EAAG,IAAGA,EAClBE,EAAaT,EAAbS,cACAC,EAAaV,EAAbU,cACAC,EAAaX,EAAbW,cACAC,EAAgBZ,EAAhBY,iBAAgBC,EAAAb,EAChBc,uBAAAA,OAAyB,IAAHD,GAAOA,EAAAE,EAAAf,EAC7BgB,eAAAA,OAAiB,IAAHD,EAAG,KAAIA,EAGnBE,EAWEf,EAXFe,GACAC,EAUEhB,EAVFgB,SACAC,EASEjB,EATFiB,aACAC,EAQElB,EARFkB,UACAC,EAOEnB,EAPFmB,cACAC,EAMEpB,EANFoB,MAAKC,EAMHrB,EALFsB,SAAAA,OAAW,IAAHD,EAAG,GAAEA,EACbE,EAIEvB,EAJFuB,SACAC,EAGExB,EAHFwB,SACAC,EAEEzB,EAFFyB,UAASC,EAEP1B,EADF2B,iBAAAA,OAAmB,IAAHD,GAAQA,EAEpBE,EAAmB5B,EAAnB4B,eAEAC,EAAMC,EAAO,MACbC,EAAWD,IAEXE,EAAsBC,EAAiB,CAAEJ,IAAKE,IAEpDG,GAAU,iBACFC,EAAUN,EAAIO,QAChBjC,GAAegC,GAAWvB,KACxBR,aAAS,EAATA,EAAWgC,UAAWD,EAExB/B,EAAUgC,QAAQC,UAAYF,EAAQG,UAAYhC,EAExB,QAA1BiC,EAAAJ,aAAO,EAAPA,EAASK,sBAAiB,IAAAD,GAAAA,EAAAE,KAAAN,EAAA,CAAEO,UAAW,WAG7C,GAAG,CAACb,EAAK1B,EAAaS,EAAwBR,EAAWE,EAAcqB,IAEvE,IAAMgB,EAAa,SACjBC,EACAC,EACA5C,GAEA,MAAiB,aAAb4C,EACMD,EAA4CE,EAAGC,EAAOC,WAAY/C,IAI1EgD,EAAAC,cAACC,EAAI,CACHlD,UAAW6C,EAAGC,EAAOC,WAAY/C,GACjC4C,SAAS,OACTD,KAAMA,EACNtB,SAAUA,EACV8B,kBAAgB,KAKhBC,EAAUC,GACd,SAACC,GACKhC,GACJhB,EAAcgD,EAAOxD,EAAOC,GAAQ,EACrC,GACD,CAACD,EAAOC,EAAQO,EAAegB,IAG3BiC,EAAeF,GACnB,SAACC,GACKhC,GACJf,EAAc+C,EAAOxD,EAAOC,GAAQ,EACrC,GACD,CAACD,EAAOC,EAAQQ,EAAee,IAG3BkC,EAAeH,GACnB,SAACC,GACKhC,GACJd,EAAc8C,EAAOxD,EAAOC,GAAQ,EACrC,GACD,CAACD,EAAOC,EAAQS,EAAec,IAG3BmC,EAAYJ,GAChB,SAACC,GACKA,EAAMI,MAAQC,EAASC,OAASN,EAAMI,MAAQC,EAASE,OACzDvD,EAAcgD,EAAOxD,EAAOC,GAAQ,EAEvC,GACD,CAACO,EAAeR,EAAOC,IAEpB4B,IACHA,EAAiBI,EAAsBZ,EAAQ,MAGjD,IAAM2C,GAAsBC,GAAQ,WAAA,OAAMlD,GAAkBA,EAAed,EAAO,GAAE,CAACc,EAAgBd,IAE/FiE,GACJhB,EAAAC,cAAAD,EAAAiB,SAAA,KACGlD,GAAY2B,EAAW3B,EAAUC,EAAc8B,EAAOoB,MACvDlB,EAAAC,cAAA,MAAA,CAAKrB,IAAKE,EAAU9B,UAAW6C,EAAGC,EAAOqB,cACtChD,GAEFF,GAAayB,EAAWzB,EAAWC,EAAe,KAIvD,OACE8B,EAACC,cAAAmB,EAAQ,CAAAC,QAAS1C,GAChBqB,EAAAC,cAAA,MAAA,CACErB,IAAKA,EACL8B,IAAK5C,GAAMK,EACC,aAAAO,EAAmB,EAAI,EAAC,gBACrBzB,EAAQ,aACXuB,GAAaL,EACzBL,GAAIwD,EAAYxD,EAAIhB,GACP,cAAAyE,EAAUC,EAAuBC,gBAAiB3E,GAC/D0D,aAAcA,EACdJ,QAASA,EACTK,UAAWA,EACXF,aAAcA,EACdvD,UAAW6C,EAAGC,EAAO4B,eAAgB1E,EAAS2E,EAAAA,EAAAA,EAAAA,EAAA,CAAA,EAC3C7B,EAAOxB,SAAWA,GAClBwB,EAAOvB,SAAWA,GAClBuB,EAAO8B,OAAS3E,GAChB6C,EAAO+B,cAAgB3E,IAE1B4E,MAAO,CAAEC,OAAQtE,IAEhBqD,IAAuBE,IAIhC,GAE+C,CAAEgB,UAAWC"}