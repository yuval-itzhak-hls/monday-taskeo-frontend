{"version":3,"file":"Combobox.js","sources":["../../../../../src/components/Combobox/Combobox.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport cx from \"classnames\";\nimport React, { useRef, useState, forwardRef, useMemo, useCallback } from \"react\";\nimport { isFunction, noop as NOOP } from \"lodash-es\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Search from \"../Search/Search\";\nimport { BASE_SIZES } from \"../../constants\";\nimport Button from \"../Button/Button\";\nimport Text from \"../Text/Text\";\nimport ComboboxOption from \"./components/ComboboxOption/ComboboxOption\";\nimport { defaultFilter } from \"./ComboboxService\";\nimport { ComboboxItems } from \"./components/ComboboxItems/ComboboxItems\";\nimport { StickyCategoryHeader } from \"./components/StickyCategoryHeader/StickyCategoryHeader\";\nimport { useItemsData, useKeyboardNavigation } from \"./ComboboxHelpers/ComboboxHelpers\";\nimport { getOptionId } from \"./helpers\";\nimport { ElementContent, SubIcon, VibeComponentProps, withStaticProps } from \"../../types\";\nimport {\n  IComboboxCategoryMap,\n  IComboboxItem,\n  IComboboxOption,\n  COMBOBOX_LISTBOX_ID\n} from \"./components/ComboboxConstants\";\nimport styles from \"./Combobox.module.scss\";\nimport { ComboboxSizes } from \"./Combobox.types\";\nimport IconButton from \"../IconButton/IconButton\";\nimport MenuButton from \"../MenuButton/MenuButton\";\n\nexport interface ComboboxProps extends VibeComponentProps {\n  className?: string;\n  optionClassName?: string;\n  searchWrapperClassName?: string;\n  /**\n   * Placeholder to show when no value was selected\n   */\n  placeholder?: string;\n  /**\n   * Unique element id\n   */\n  id?: string;\n  /**\n   * A message that will be displayed inside the combo box when no results are found\n   */\n  noResultsMessage?: string;\n  disabled?: boolean;\n  options?: IComboboxOption[];\n  categories?: IComboboxCategoryMap;\n  /**\n   * Divider between categories sections\n   */\n  withCategoriesDivider?: boolean;\n  size?: ComboboxSizes;\n  optionLineHeight?: number;\n  optionsListHeight?: number;\n  autoFocus?: boolean;\n  /**\n   * Callback that called after clicking on the add new combo box button.\n   * @param {string} _filterValue\n   */\n  onAddNew?: (value: string) => void;\n  /**\n   * The label of the button that appears at the end of the combo box when the search does not return appropriate options\n   */\n  addNewLabel?: ((label: string) => ElementContent) | string;\n  filter?: (filterValue: string, options: IComboboxOption[]) => IComboboxOption[];\n  /**\n   * Default search input\n   */\n  defaultFilter?: string;\n  disableFilter?: boolean;\n  /**\n   * For controlled search input. If provided, `defaultFilter` will be ignored\n   */\n  filterValue?: string;\n  onFilterChanged?: (value: string) => void;\n  /**\n   * Display the combo box with loading state\n   */\n  loading?: boolean;\n  /**\n   * on mouse hover callback for option\n   */\n  // onOptionHover?: PropTypes.func,\n  onOptionHover?: (event: React.MouseEvent, index: number, option: IComboboxOption) => void;\n  /**\n   * on mouse leave callback for option\n   */\n  // onOptionLeave?: PropTypes.func,\n  onOptionLeave?: () => void;\n  /**\n   * Allowed to the following behavior: scrolling automatically to the combo box's selected option\n   */\n  shouldScrollToSelectedItem?: boolean;\n  noResultsRenderer?: () => JSX.Element;\n  stickyCategories?: boolean;\n  /** By default, the first option will be selected, when focusing selecting the first option, or when changing items */\n  defaultVisualFocusFirstIndex?: boolean;\n  /** Clear the filter/search on selection (click or enter) */\n  clearFilterOnSelection?: boolean;\n  /** Replace the regular appearance of combo box option with custom renderer. */\n  optionRenderer?: (option: IComboboxOption) => JSX.Element;\n  /** Maximum options count without scroll */\n  maxOptionsWithoutScroll?: number;\n  /**\n   * Using virtualized list for rendering only the items which visible to the user in any given user (performance optimization)\n   */\n  renderOnlyVisibleOptions?: boolean;\n  /**\n   * On option click callback\n   */\n  onClick?: (optionData: IComboboxOption) => void;\n  /**\n   * Custom search icon\n   */\n  searchIcon?: SubIcon;\n  searchInputAriaLabel?: string;\n  debounceRate?: number;\n  searchInputRef?: React.RefObject<HTMLInputElement>;\n  /**\n   * Render additional action within the right section of search component.\n   */\n  renderAction?: React.ReactElement<typeof IconButton | typeof MenuButton>;\n  /**\n   * If true, hides the additional action when the user types in the search input.\n   */\n  hideRenderActionOnInput?: boolean;\n}\n\nconst Combobox: React.FC<ComboboxProps> & {\n  sizes?: typeof BASE_SIZES;\n  iconTypes?: typeof ComboboxOption.iconTypes;\n} = forwardRef(\n  (\n    {\n      className = \"\",\n      optionClassName = \"\",\n      searchWrapperClassName,\n      searchIcon,\n      id = \"\",\n      placeholder = \"\",\n      size = \"medium\",\n      defaultVisualFocusFirstIndex,\n      optionLineHeight = 32,\n      optionsListHeight,\n      autoFocus = false,\n      disabled = false,\n      options = [],\n      categories,\n      withCategoriesDivider = false,\n      noResultsMessage = \"No results found\",\n      onAddNew,\n      addNewLabel = \"Add new\",\n      onClick = (_optionData: IComboboxOption) => {},\n      filter = defaultFilter,\n      disableFilter = false,\n      filterValue: filterValueProp,\n      onFilterChanged,\n      loading = false,\n      onOptionHover = NOOP,\n      onOptionLeave = NOOP,\n      shouldScrollToSelectedItem = true,\n      noResultsRenderer,\n      stickyCategories = false,\n      optionRenderer = null,\n      renderOnlyVisibleOptions = false,\n      clearFilterOnSelection = false,\n      maxOptionsWithoutScroll,\n      defaultFilter: defaultFilterValue = \"\",\n      searchInputAriaLabel = \"Search for content\",\n      \"data-testid\": dataTestId,\n      debounceRate,\n      searchInputRef,\n      renderAction: RenderAction,\n      hideRenderActionOnInput\n    }: ComboboxProps,\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const inputRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n    const mergedInputRef = useMergeRef(inputRef, searchInputRef);\n\n    const [filterValue, setFilterValue] = useState(filterValueProp || defaultFilterValue);\n\n    if (filterValueProp !== undefined && filterValueProp !== filterValue) {\n      setFilterValue(filterValueProp);\n    }\n\n    const onChangeCallback = useCallback(\n      (value: string) => {\n        setActiveOptionIndex(-1);\n        if (onFilterChanged) {\n          onFilterChanged(value);\n        }\n        setFilterValue(value);\n      },\n      [setFilterValue, onFilterChanged]\n    );\n\n    const onOptionHoverCB = useCallback(\n      (event: React.MouseEvent, index: number, option: IComboboxOption) => {\n        onOptionHover(event, index, option);\n      },\n      [onOptionHover]\n    );\n\n    const filteredOptions: IComboboxOption[] = useMemo(() => {\n      if (disableFilter) {\n        return options;\n      }\n      return filter(filterValue, options);\n    }, [options, filterValue, filter, disableFilter]);\n\n    const [activeOptionIndex, setActiveOptionIndex] = useState(-1);\n\n    const isChildSelectable = useCallback(\n      (index: number) => {\n        return index !== undefined && filteredOptions[index] && !filteredOptions[index].disabled;\n      },\n      [filteredOptions]\n    );\n\n    const onAddNewCallback = useCallback(() => {\n      onAddNew && onAddNew(filterValue);\n      // clear filter after adding\n      setFilterValue(\"\");\n    }, [onAddNew, filterValue, setFilterValue]);\n\n    const hasResults = filteredOptions.length > 0;\n    const hasFilter = filterValue.length > 0;\n\n    function getAddNewLabel() {\n      if (isFunction(addNewLabel)) {\n        return addNewLabel(filterValue);\n      }\n      return addNewLabel;\n    }\n\n    function renderNoResults() {\n      if (noResultsRenderer) {\n        return noResultsRenderer();\n      }\n\n      return (\n        <div className={styles.comboboxNoResults}>\n          <div className={styles.comboboxMessageWrapper}>\n            <span className={styles.comboboxMessage}>{noResultsMessage}</span>\n          </div>\n          {onAddNew && !disabled && (\n            <Button className={styles.addNewButton} size={size} kind=\"tertiary\" onClick={onAddNewCallback}>\n              <span className={styles.buttonLabel}>{getAddNewLabel()}</span>\n            </Button>\n          )}\n        </div>\n      );\n    }\n\n    const [activeCategoryLabel, setActiveCategoryLabel] = useState<string>();\n\n    const onActiveCategoryChanged = useCallback(\n      (categoryData: IComboboxItem) => {\n        if (categoryData?.category?.label !== activeCategoryLabel) {\n          setActiveCategoryLabel(categoryData?.category?.label);\n        }\n      },\n      [activeCategoryLabel]\n    );\n\n    const { items, itemsMap, selectableItems } = useItemsData({\n      categories,\n      options: filteredOptions,\n      filterValue,\n      withCategoriesDivider,\n      optionLineHeight\n    });\n\n    const overrideOnClick = useCallback(\n      (_event: React.MouseEvent | React.KeyboardEvent, itemIndex: number) => {\n        onClick(selectableItems[itemIndex]);\n        if (isChildSelectable(itemIndex)) {\n          setActiveOptionIndex(itemIndex);\n        }\n        if (clearFilterOnSelection) {\n          // clear filter after adding\n          onChangeCallback(\"\");\n        }\n      },\n      [onClick, selectableItems, isChildSelectable, clearFilterOnSelection, onChangeCallback]\n    );\n\n    const {\n      visualFocusItemIndex,\n      visualFocusItemId,\n      onOptionClick: overrideOnOptionClick\n    } = useKeyboardNavigation({\n      getOptionId,\n      defaultVisualFocusFirstIndex,\n      onClick: overrideOnClick,\n      isChildSelectable,\n      options: selectableItems,\n      inputRef: mergedInputRef\n    });\n\n    return (\n      <Text\n        type=\"text2\"\n        ref={mergedRef}\n        className={cx(styles.combobox, className, getStyle(styles, camelCase(\"size-\" + size)), {\n          [styles.empty]: !hasResults,\n          [styles.stickyCategory]: stickyCategories\n        })}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.COMBOBOX, id)}\n        ellipsis={false}\n      >\n        <div className={styles.comboboxList} style={{ maxHeight: optionsListHeight }}>\n          <Search\n            ref={mergedInputRef}\n            value={filterValue}\n            className={cx(styles.comboboxSearchWrapper, searchWrapperClassName)}\n            inputAriaLabel={searchInputAriaLabel}\n            currentAriaResultId={visualFocusItemId}\n            id=\"combobox-search\"\n            placeholder={placeholder}\n            size={size}\n            disabled={disabled}\n            onChange={onChangeCallback}\n            autoFocus={autoFocus}\n            loading={loading}\n            searchIconName={searchIcon}\n            ariaExpanded={hasFilter || hasResults}\n            ariaHasPopup=\"listbox\"\n            searchResultsContainerId={id ? `${id}-listbox` : COMBOBOX_LISTBOX_ID}\n            debounceRate={debounceRate}\n            renderAction={RenderAction}\n            hideRenderActionOnInput={hideRenderActionOnInput}\n          />\n          {stickyCategories && <StickyCategoryHeader label={activeCategoryLabel} />}\n          {hasResults && (\n            <ComboboxItems\n              stickyCategories={stickyCategories}\n              categories={categories}\n              options={items}\n              itemsMap={itemsMap}\n              optionClassName={optionClassName}\n              optionRenderer={optionRenderer}\n              activeItemIndex={activeOptionIndex}\n              onActiveCategoryChanged={onActiveCategoryChanged}\n              onOptionClick={overrideOnOptionClick}\n              onOptionEnter={onOptionHoverCB}\n              onOptionLeave={onOptionLeave}\n              optionLineHeight={optionLineHeight}\n              shouldScrollToSelectedItem={shouldScrollToSelectedItem}\n              renderOnlyVisibleOptions={renderOnlyVisibleOptions}\n              maxOptionsWithoutScroll={maxOptionsWithoutScroll}\n              visualFocusItemIndex={visualFocusItemIndex}\n              id={id ? `${id}-listbox` : COMBOBOX_LISTBOX_ID}\n            />\n          )}\n        </div>\n        {hasFilter && !hasResults && !loading && renderNoResults()}\n      </Text>\n    );\n  }\n);\n\n// Locate loading next to search icon\n// color it with --secondary-text-color\n// size it like the icon - we think it's 16px - make sure it's not fat\n\nexport default withStaticProps(Combobox, {\n  sizes: BASE_SIZES,\n  iconTypes: ComboboxOption.iconTypes\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","_ref$className","className","_ref$optionClassName","optionClassName","searchWrapperClassName","searchIcon","_ref$id","id","_ref$placeholder","placeholder","_ref$size","size","defaultVisualFocusFirstIndex","_ref$optionLineHeight","optionLineHeight","optionsListHeight","_ref$autoFocus","autoFocus","_ref$disabled","disabled","_ref$options","options","categories","_ref$withCategoriesDi","withCategoriesDivider","_ref$noResultsMessage","noResultsMessage","onAddNew","_ref$addNewLabel","addNewLabel","_ref$onClick","onClick","_optionData","_ref$filter","filter","defaultFilter","_ref$disableFilter","disableFilter","filterValueProp","filterValue","onFilterChanged","_ref$loading","loading","_ref$onOptionHover","onOptionHover","NOOP","_ref$onOptionLeave","onOptionLeave","_ref$shouldScrollToSe","shouldScrollToSelectedItem","noResultsRenderer","_ref$stickyCategories","stickyCategories","_ref$optionRenderer","optionRenderer","_ref$renderOnlyVisibl","renderOnlyVisibleOptions","_ref$clearFilterOnSel","clearFilterOnSelection","maxOptionsWithoutScroll","_ref$defaultFilter","defaultFilterValue","_ref$searchInputAriaL","searchInputAriaLabel","dataTestId","debounceRate","searchInputRef","RenderAction","renderAction","hideRenderActionOnInput","componentRef","useRef","inputRef","mergedRef","useMergeRef","mergedInputRef","_useState","useState","_useState2","_slicedToArray","setFilterValue","undefined","onChangeCallback","useCallback","value","setActiveOptionIndex","onOptionHoverCB","event","index","option","filteredOptions","useMemo","_useState3","_useState4","activeOptionIndex","isChildSelectable","onAddNewCallback","hasResults","length","hasFilter","_useState5","_useState6","activeCategoryLabel","setActiveCategoryLabel","onActiveCategoryChanged","categoryData","_a","category","label","_b","_useItemsData","useItemsData","items","itemsMap","selectableItems","overrideOnClick","_event","itemIndex","_useKeyboardNavigatio","useKeyboardNavigation","getOptionId","visualFocusItemIndex","visualFocusItemId","overrideOnOptionClick","onOptionClick","React","createElement","Text","type","cx","styles","combobox","getStyle","camelCase","_defineProperty","empty","stickyCategory","getTestId","ComponentDefaultTestId","COMBOBOX","ellipsis","comboboxList","style","maxHeight","Search","comboboxSearchWrapper","inputAriaLabel","currentAriaResultId","onChange","searchIconName","ariaExpanded","ariaHasPopup","searchResultsContainerId","concat","COMBOBOX_LISTBOX_ID","StickyCategoryHeader","ComboboxItems","activeItemIndex","onOptionEnter","comboboxNoResults","comboboxMessageWrapper","comboboxMessage","Button","addNewButton","kind","buttonLabel","isFunction","sizes","BASE_SIZES","iconTypes","ComboboxOption"],"mappings":"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"}