import { ReactElement } from "react";
import { AnimationType as AnimationTypeEnum, HideShowEvent as HideShowEventEnum } from "../Dialog/DialogConstants";
import { DialogAnimationType, DialogTriggerEvent } from "../Dialog/Dialog.types";
import { TipseenCloseButtonTheme as TipseenCloseButtonThemeEnum, TipseenColor as TipseenColorEnum } from "./TipseenConstants";
import { TipseenCloseButtonTheme, TipseenColor } from "./Tipseen.types";
import { ElementContent, VibeComponent, VibeComponentProps } from "../../types";
import { MoveBy } from "../../types/MoveBy";
import { Modifier } from "react-popper";
import React from "react";
import { TooltipPositions } from "../Tooltip/Tooltip.types";
import { TooltipPositions as TooltipPositionsEnum } from "../Tooltip/TooltipConstants";
export interface TipseenProps extends VibeComponentProps {
    /**
     * Classname for overriding TipseenTitle styles
     */
    titleClassName?: string;
    position?: TooltipPositions;
    animationType?: DialogAnimationType;
    hideDelay?: number;
    showDelay?: number;
    title?: string;
    hideCloseButton?: boolean;
    children?: ReactElement;
    containerSelector?: string;
    hideTrigger?: DialogTriggerEvent | Array<DialogTriggerEvent>;
    showTrigger?: DialogTriggerEvent | Array<DialogTriggerEvent>;
    width?: number;
    moveBy?: MoveBy;
    hideWhenReferenceHidden?: boolean;
    referenceWrapperClassName?: string;
    /**
     * when false, the arrow of the tooltip is hidden
     */
    tip?: boolean;
    /** Class name for a tooltip's arrow */
    tooltipArrowClassName?: string;
    /**
     * PopperJS Modifiers type
     * https://popper.js.org/docs/v2/modifiers/
     */
    modifiers?: Array<Modifier<unknown>>;
    closeAriaLabel?: string;
    onClose?: (event?: React.MouseEvent<HTMLButtonElement>) => void;
    content: ElementContent;
    /**
     * Control the color of the Tipseen close button. Dark theme can be useful while presenting bright images under the tipseen image
     */
    closeButtonTheme?: TipseenCloseButtonTheme;
    floating?: boolean;
    /** The color of the Tipseen */
    color?: TipseenColor;
}
export declare const TipseenContext: React.Context<TipseenColor>;
declare const _default: ((VibeComponent<TipseenProps & React.RefAttributes<HTMLElement>, HTMLElement> & Partial<{
    closeButtonThemes: typeof TipseenCloseButtonThemeEnum;
    animationTypes: typeof AnimationTypeEnum;
    hideShowTriggers: typeof HideShowEventEnum;
    colors: typeof TipseenColorEnum;
    positions: typeof TooltipPositionsEnum;
}>) | (React.FC<TipseenProps & React.RefAttributes<HTMLElement>> & Partial<{
    closeButtonThemes: typeof TipseenCloseButtonThemeEnum;
    animationTypes: typeof AnimationTypeEnum;
    hideShowTriggers: typeof HideShowEventEnum;
    colors: typeof TipseenColorEnum;
    positions: typeof TooltipPositionsEnum;
}>)) & {
    closeButtonThemes: typeof TipseenCloseButtonThemeEnum;
    animationTypes: typeof AnimationTypeEnum;
    hideShowTriggers: typeof HideShowEventEnum;
    colors: typeof TipseenColorEnum;
    positions: typeof TooltipPositionsEnum;
};
export default _default;
